<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端筛选条件大导致系统卡死</title>
      <link href="/2023/01/11/Other/%E5%89%8D%E7%AB%AF%E7%AD%9B%E9%80%89%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E5%A4%A7%E5%AF%BC%E8%87%B4%E7%B3%BB%E7%BB%9F%E5%8D%A1%E6%AD%BB/"/>
      <url>/2023/01/11/Other/%E5%89%8D%E7%AB%AF%E7%AD%9B%E9%80%89%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E5%A4%A7%E5%AF%BC%E8%87%B4%E7%B3%BB%E7%BB%9F%E5%8D%A1%E6%AD%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="前端筛选条件大导致系统卡死"><a href="#前端筛选条件大导致系统卡死" class="headerlink" title="前端筛选条件大导致系统卡死"></a>前端筛选条件大导致系统卡死</h1><p>现象：系统无故会卡死，通过查看日志，发现部分接口请求参数范围太大，导致数据库60w条数据返回，数据库内存飙升</p><p>思考：数据库连接池数量都被大查询占用，导致没有连接可用，系统卡死，或者是大查询导致数据库IO次数太大，内存不足，系统卡死等多种问题。</p><p>解决思路：数据库对外开放查询，无法限制其查询条数，限制则导致正常功能无法使用，那只能选择在dao层，</p><p>1.从Mybatis框架中对结果集进行限制，超过限制则抛出异常，不进行序列化</p><p>2.通过在classPath下建立实现mybatis组件的resultsetHandler接口的默认defaultresultsetHandler中的row什么方法来对返回条数进行限制，让该类优先于mybatis中的类先加载，classpath优先于lib</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis+SpringBoot实战</title>
      <link href="/2022/10/23/Redis/Redis%E5%AE%9E%E6%88%98/"/>
      <url>/2022/10/23/Redis/Redis%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-SpringBoot实战"><a href="#Redis-SpringBoot实战" class="headerlink" title="Redis+SpringBoot实战"></a>Redis+SpringBoot实战</h2><h3 id="1-项目应用"><a href="#1-项目应用" class="headerlink" title="1.项目应用"></a>1.项目应用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 登陆缓存过期事件</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">@ConditionalOnProperty(name = &quot;spring.redis.type&quot;, havingValue = &quot;single&quot;)</span><br><span class="line">public class RedisSingleDeleteListener extends KeyDeleteEventMessageListener &#123;</span><br><span class="line"></span><br><span class="line">    public RedisSingleDeleteListener(RedisMessageListenerContainer redisMessageListenerContainer) &#123;</span><br><span class="line">        super(redisMessageListenerContainer);</span><br><span class="line">        log.info(&quot;Redis单机 删除事件,启动监听......&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 针对redis数据失效事件，进行数据处理</span><br><span class="line">     *</span><br><span class="line">     * @param message</span><br><span class="line">     * @param pattern</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void onMessage(Message message, byte[] pattern) &#123;</span><br><span class="line">        String delKey = message.toString();</span><br><span class="line">        if (Strings.startsWith(delKey, CacheKeyConstant.PC_LOGIN_CACHE)) &#123;</span><br><span class="line">            String[] strArr = delKey.split(AppConstant.COLON);</span><br><span class="line">            // 用户ID</span><br><span class="line">            String userId = strArr[1];</span><br><span class="line">            // 删除锁信息</span><br><span class="line">            // RedisCacheUtil.delKeysByPrefix(Strings.connect(CacheKeyConstant.LOCK_KEY, userId,</span><br><span class="line">            // AppConstant.STAR));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-Redission"><a href="#2-Redission" class="headerlink" title="2.Redission"></a>2.Redission</h5><p>2.1 配置类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Redisson配置</span><br><span class="line"> *</span><br><span class="line"> * @author zhaohaiwei</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RedissonConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * redisson版本是3.5，集群的ip前面要加上“redis://”,不然会报错，3.2版本可不加</span><br><span class="line">     */</span><br><span class="line">    private static final String REDIS_CLIENT_HEADER = &quot;redis://&quot;;</span><br><span class="line">    private final Logger logger = LoggerFactory.getLogger(RedissonConfig.class);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 单机模式 redisson 客户端</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnProperty(name = &quot;spring.redis.type&quot;, havingValue = &quot;single&quot;)</span><br><span class="line">    public RedissonClient redissonSingle(RedisConfigProperties redisConfigProperties) &#123;</span><br><span class="line">        Config config = new Config();</span><br><span class="line">        config.useSingleServer()</span><br><span class="line">            .setAddress(REDIS_CLIENT_HEADER + redisConfigProperties.getHost() + AppConstant.COLON + redisConfigProperties.getPort())</span><br><span class="line">            .setPassword(redisConfigProperties.getPassword()).setDatabase(redisConfigProperties.getDatabase());</span><br><span class="line">        logger.info(&quot;Redisson stand-alone mode config init...&quot;);</span><br><span class="line">        return Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 集群模式 redisson 客户端</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnProperty(name = &quot;spring.redis.type&quot;, havingValue = &quot;cluster&quot;)</span><br><span class="line">    public RedissonClient redissonCluster(RedisConfigProperties redisConfigProperties) &#123;</span><br><span class="line">        Cluster cluster = redisConfigProperties.getCluster();</span><br><span class="line">        if (cluster == null) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;请检查Redis集群配置!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Config config = new Config();</span><br><span class="line">        List&lt;String&gt; nodeList = redisConfigProperties.getCluster().getNodes();</span><br><span class="line">        String[] clusterNodes = new String[nodeList.size()];</span><br><span class="line">        for (int i = 0; i &lt; nodeList.size(); i++) &#123;</span><br><span class="line">            clusterNodes[i] = REDIS_CLIENT_HEADER + nodeList.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        // @formatter:off</span><br><span class="line">        config.useClusterServers()</span><br><span class="line">            .addNodeAddress(clusterNodes)</span><br><span class="line">            .setPassword(redisConfigProperties.getPassword())</span><br><span class="line">            .setKeepAlive(true)</span><br><span class="line">            // 命令失败重试次数</span><br><span class="line">            .setRetryAttempts(3)</span><br><span class="line">            // 集群状态扫描间隔时间，单位是毫秒</span><br><span class="line">            .setScanInterval(2000);</span><br><span class="line">        // @formatter:on</span><br><span class="line">        logger.info(&quot;Redisson cluster mode config init...&quot;);</span><br><span class="line">        return Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RedissonLocker redissonLocker(RedissonClient redissonClient) &#123;</span><br><span class="line">        RedissonLocker locker = new RedissonLocker(redissonClient);</span><br><span class="line">        // 设置LockUtil的锁处理对象</span><br><span class="line">        LockUtil.setLocker(locker);</span><br><span class="line">        return locker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-redis配置文件"><a href="#3-redis配置文件" class="headerlink" title="3.redis配置文件"></a>3.redis配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * redis配置</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Configuration</span><br><span class="line">@EnableCaching</span><br><span class="line">@AutoConfigureAfter(RedisAutoConfiguration.class)</span><br><span class="line">public class RedisCacheConfig extends CachingConfigurerSupport &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.cache.redis.timeToLive&#125;&quot;)</span><br><span class="line">    private Duration timeToLive;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.cache.redis.keyPrefix&#125;&quot;)</span><br><span class="line">    private String keyPrefix;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Override</span><br><span class="line">    public KeyGenerator keyGenerator() &#123;</span><br><span class="line">        return (target, method, params) -&gt; &#123;</span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            sb.append(target.getClass().getName());</span><br><span class="line">            sb.append(method.getName());</span><br><span class="line">            for (Object obj : params) &#123;</span><br><span class="line">                sb.append(obj.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            return sb.toString();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置缓存管理器</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public CacheManager cacheManager(LettuceConnectionFactory lettuceConnectionFactory) &#123;</span><br><span class="line">        log.info(&quot;RedisCacheManager config init...&quot;);</span><br><span class="line">        // @formatter:off</span><br><span class="line">        // 配置序列化</span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">            .entryTtl(timeToLive)</span><br><span class="line">            .prefixCacheNameWith(keyPrefix)</span><br><span class="line">            .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()))</span><br><span class="line">            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer()));</span><br><span class="line">        // @formatter:on</span><br><span class="line">        return RedisCacheManager.builder(lettuceConnectionFactory).cacheDefaults(config).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置自定义redisTemplate</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisTemplate&lt;String, Object&gt; redisTemplate(LettuceConnectionFactory lettuceConnectionFactory,</span><br><span class="line">        RedisSerializer&lt;Object&gt; redisSerializer) &#123;</span><br><span class="line">        log.info(&quot;RedisTemplate config init...&quot;);</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">        template.setDefaultSerializer(redisSerializer);</span><br><span class="line">        template.setValueSerializer(redisSerializer);</span><br><span class="line">        template.setHashValueSerializer(redisSerializer);</span><br><span class="line">        RedisSerializer&lt;String&gt; stringRedisSerializer = new StringRedisSerializer();</span><br><span class="line">        // key采用String的序列化方式</span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        // hash的key也采用String的序列化方式</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        RedisCacheUtil.setRedisTemplate(template);</span><br><span class="line">        return template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 自定义redis序列化的机制,重新定义一个ObjectMapper.防止和MVC的冲突</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisSerializer&lt;Object&gt; redisSerializer() &#123;</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        // 反序列化时候遇到不匹配的属性并不抛出异常</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);</span><br><span class="line">        // 序列化时候遇到空对象不抛出异常</span><br><span class="line">        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);</span><br><span class="line">        // 反序列化的时候如果是无效子类型,不抛出异常</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false);</span><br><span class="line">        // 不使用默认的dateTime进行序列化,</span><br><span class="line">        objectMapper.configure(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS, false);</span><br><span class="line">        // 使用JSR310提供的序列化类,里面包含了大量的JDK8时间序列化类</span><br><span class="line">        objectMapper.registerModule(new JavaTimeModule());</span><br><span class="line">        // 启用反序列化所需的类型信息,在属性中添加@class</span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL,</span><br><span class="line">            JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        // 配置null值的序列化器</span><br><span class="line">        GenericJackson2JsonRedisSerializer.registerNullValueSerializer(objectMapper, null);</span><br><span class="line">        return new GenericJackson2JsonRedisSerializer(objectMapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RedisCacheConfig 缓存配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * redis配置</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Configuration</span><br><span class="line">@EnableCaching</span><br><span class="line">@AutoConfigureAfter(RedisAutoConfiguration.class)</span><br><span class="line">public class RedisCacheConfig extends CachingConfigurerSupport &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.cache.redis.timeToLive&#125;&quot;)</span><br><span class="line">    private Duration timeToLive;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.cache.redis.keyPrefix&#125;&quot;)</span><br><span class="line">    private String keyPrefix;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Override</span><br><span class="line">    public KeyGenerator keyGenerator() &#123;</span><br><span class="line">        return (target, method, params) -&gt; &#123;</span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            sb.append(target.getClass().getName());</span><br><span class="line">            sb.append(method.getName());</span><br><span class="line">            for (Object obj : params) &#123;</span><br><span class="line">                sb.append(obj.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            return sb.toString();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置缓存管理器</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public CacheManager cacheManager(LettuceConnectionFactory lettuceConnectionFactory) &#123;</span><br><span class="line">        log.info(&quot;RedisCacheManager config init...&quot;);</span><br><span class="line">        // @formatter:off</span><br><span class="line">        // 配置序列化</span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">            .entryTtl(timeToLive)</span><br><span class="line">            .prefixCacheNameWith(keyPrefix)</span><br><span class="line">            .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()))</span><br><span class="line">            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer()));</span><br><span class="line">        // @formatter:on</span><br><span class="line">        return RedisCacheManager.builder(lettuceConnectionFactory).cacheDefaults(config).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置自定义redisTemplate</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisTemplate&lt;String, Object&gt; redisTemplate(LettuceConnectionFactory lettuceConnectionFactory,</span><br><span class="line">        RedisSerializer&lt;Object&gt; redisSerializer) &#123;</span><br><span class="line">        log.info(&quot;RedisTemplate config init...&quot;);</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">        template.setDefaultSerializer(redisSerializer);</span><br><span class="line">        template.setValueSerializer(redisSerializer);</span><br><span class="line">        template.setHashValueSerializer(redisSerializer);</span><br><span class="line">        RedisSerializer&lt;String&gt; stringRedisSerializer = new StringRedisSerializer();</span><br><span class="line">        // key采用String的序列化方式</span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        // hash的key也采用String的序列化方式</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        RedisCacheUtil.setRedisTemplate(template);</span><br><span class="line">        return template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 自定义redis序列化的机制,重新定义一个ObjectMapper.防止和MVC的冲突</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisSerializer&lt;Object&gt; redisSerializer() &#123;</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        // 反序列化时候遇到不匹配的属性并不抛出异常</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);</span><br><span class="line">        // 序列化时候遇到空对象不抛出异常</span><br><span class="line">        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);</span><br><span class="line">        // 反序列化的时候如果是无效子类型,不抛出异常</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false);</span><br><span class="line">        // 不使用默认的dateTime进行序列化,</span><br><span class="line">        objectMapper.configure(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS, false);</span><br><span class="line">        // 使用JSR310提供的序列化类,里面包含了大量的JDK8时间序列化类</span><br><span class="line">        objectMapper.registerModule(new JavaTimeModule());</span><br><span class="line">        // 启用反序列化所需的类型信息,在属性中添加@class</span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL,</span><br><span class="line">            JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        // 配置null值的序列化器</span><br><span class="line">        GenericJackson2JsonRedisSerializer.registerNullValueSerializer(objectMapper, null);</span><br><span class="line">        return new GenericJackson2JsonRedisSerializer(objectMapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>读取配置文件信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 用于读取配置文件信息</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@Validated</span><br><span class="line">@Data</span><br><span class="line">@EnableConfigurationProperties</span><br><span class="line">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span><br><span class="line">public class RedisConfigProperties &#123;</span><br><span class="line"></span><br><span class="line">    private String type;</span><br><span class="line"></span><br><span class="line">    private String host;</span><br><span class="line"></span><br><span class="line">    private String port;</span><br><span class="line"></span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    private int database;</span><br><span class="line"></span><br><span class="line">    private Duration timeout;</span><br><span class="line"></span><br><span class="line">    private Cluster cluster;</span><br><span class="line"></span><br><span class="line">    private Lettuce lettuce;</span><br><span class="line"></span><br><span class="line">    @Data</span><br><span class="line">    public static class Cluster &#123;</span><br><span class="line"></span><br><span class="line">        private List&lt;String&gt; nodes;</span><br><span class="line"></span><br><span class="line">        private Integer maxRedirects;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Data</span><br><span class="line">    public static class Lettuce &#123;</span><br><span class="line"></span><br><span class="line">        private Duration shutdownTimeout = Duration.ofMillis(100);</span><br><span class="line"></span><br><span class="line">        private Pool pool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Data</span><br><span class="line">    public static class Pool &#123;</span><br><span class="line"></span><br><span class="line">        private int maxIdle = 8;</span><br><span class="line"></span><br><span class="line">        private int minIdle = 0;</span><br><span class="line"></span><br><span class="line">        private int maxActive = 8;</span><br><span class="line"></span><br><span class="line">        private Duration maxWait = Duration.ofMillis(-1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringBoot启动清除缓存</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 服务启动配置</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Configuration</span><br><span class="line">public class StartConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Component</span><br><span class="line">    @ConditionalOnProperty(name = &quot;corex.start.clear-redis-cache&quot;, havingValue = &quot;true&quot;)</span><br><span class="line">    static class ClearRedisCache implements ApplicationRunner &#123;</span><br><span class="line">        @Autowired</span><br><span class="line">        private IDicLastmodService dicLastmodService;</span><br><span class="line">        @Override</span><br><span class="line">        public void run(ApplicationArguments args) &#123;</span><br><span class="line">            log.info(&quot;----------服务启动时清空redis缓存--------------&quot;);</span><br><span class="line">            dicLastmodService.updateAllDicLastmod();</span><br><span class="line">            long count = RedisCacheUtil.delKeysByPrefix(Strings.connect(CacheKeyConstant.ALL_DIC_KEY, AppConstant.STAR));</span><br><span class="line">            log.info(&quot;----------redis缓存已经清空,数量:&#123;&#125;--------------&quot;, count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-Redis-Stream-消息队列配置类"><a href="#4-Redis-Stream-消息队列配置类" class="headerlink" title="4.Redis Stream 消息队列配置类"></a>4.Redis Stream 消息队列配置类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author 王成玮d</span><br><span class="line"> * @date 2020/11/5 15:23</span><br><span class="line"> * @version 2.1.0</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Configuration</span><br><span class="line">@ConditionalOnProperty(name = &quot;corex.dicom.redisStreamPubSub&quot;, havingValue = &quot;true&quot;)</span><br><span class="line">@AutoConfigureAfter(RedissonConfig.class)</span><br><span class="line">public class ReisStreamListenConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.redis.stream.statKey&#125;&quot;)</span><br><span class="line">    private String statKey;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.stream.instKey&#125;&quot;)</span><br><span class="line">    private String instKey;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.stream.seriesKey&#125;&quot;)</span><br><span class="line">    private String seriesKey;</span><br><span class="line">    // 发送dcm文件到设备的结果消息主题</span><br><span class="line">    private final String sendDcm2DvcTopic = &quot;sendDcm2Dvc&quot;;</span><br><span class="line">    // 修改dicom 属性的消息主题</span><br><span class="line">    private final String transferDcmTopic = &quot;transferDcm&quot;;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.stream.groupSuffix&#125;&quot;)</span><br><span class="line">    private String groupSuffix;</span><br><span class="line">    @Autowired</span><br><span class="line">    private StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedissonLocker redissonLocker;</span><br><span class="line">    @Autowired</span><br><span class="line">    private IOdStSeriesService odStSeriesService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private IOdStImageService odStImageService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * redis消息监听器容器 可以添加多个监听不同话题的redis监听器，只需要把消息监听器和相应的消息订阅处理器绑定，该消息监听器 通过反射技术调用消息订阅处理器的相关方法进行一些业务处理</span><br><span class="line">     *</span><br><span class="line">     * @Param [redisConnectionFactory, statTopicLisenter, instTopicLisenter, seriesTopicLisenter]</span><br><span class="line">     * @Return org.springframework.data.redis.stream.StreamMessageListenerContainer&lt;java.lang.String,org.springframework.data.redis.connection.stream.MapRecord&lt;java.lang.String,java.lang.String,java.lang.String&gt;&gt;</span><br><span class="line">     * @Author 王成玮</span><br><span class="line">     * @DateTime 2020/11/11 9:42</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public StreamMessageListenerContainer&lt;String, MapRecord&lt;String, String, String&gt;&gt; subscription(</span><br><span class="line">        RedisConnectionFactory redisConnectionFactory, StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; statTopicLisenter,</span><br><span class="line">        StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; instTopicLisenter,</span><br><span class="line">        StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; seriesTopicLisenter,</span><br><span class="line">        StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; transferDcmTopicLisenter,</span><br><span class="line">        StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; dcm2DvcTopicLisenter) throws UnknownHostException &#123;</span><br><span class="line"></span><br><span class="line">        log.info(&quot;ReisStreamListenConfig init...&quot;);</span><br><span class="line">        // 设置监听容器选项</span><br><span class="line">        StreamMessageListenerContainer.StreamMessageListenerContainerOptions&lt;String, MapRecord&lt;String, String, String&gt;&gt; options =</span><br><span class="line">            StreamMessageListenerContainer.StreamMessageListenerContainerOptions.builder().pollTimeout(Duration.ofSeconds(1))</span><br><span class="line">                .serializer(RedisSerializer.byteArray()).serializer(RedisSerializer.string()).build();</span><br><span class="line">        // 构建监听容器</span><br><span class="line">        StreamMessageListenerContainer&lt;String, MapRecord&lt;String, String, String&gt;&gt; listenerContainer =</span><br><span class="line">            StreamMessageListenerContainer.create(redisConnectionFactory, options);</span><br><span class="line">        // 创建消费者组</span><br><span class="line">        String statGroup = createStreamGroup(statKey);</span><br><span class="line">        String instGroup = createStreamGroup(instKey);</span><br><span class="line">        String seriesGroup = createStreamGroup(seriesKey);</span><br><span class="line">        String transferDcmGroup = createStreamGroup(transferDcmTopic);</span><br><span class="line">        String sendDcmGroup = createStreamGroup(sendDcm2DvcTopic);</span><br><span class="line"></span><br><span class="line">        LockUtil.setLocker(redissonLocker);</span><br><span class="line">        // 绑定消费者组、监听器</span><br><span class="line">        bindingListener(statTopicLisenter, statKey, statGroup, listenerContainer);</span><br><span class="line">        bindingListener(instTopicLisenter, instKey, instGroup, listenerContainer);</span><br><span class="line">        bindingListener(seriesTopicLisenter, seriesKey, seriesGroup, listenerContainer);</span><br><span class="line">        bindingListener(transferDcmTopicLisenter, transferDcmTopic, transferDcmGroup, listenerContainer);</span><br><span class="line">        bindingListener(dcm2DvcTopicLisenter, sendDcm2DvcTopic, sendDcmGroup, listenerContainer);</span><br><span class="line">        listenerContainer.start();</span><br><span class="line">        return listenerContainer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用 odStappService.updateStatByOdAppno 处理 statKey 通道的消息</span><br><span class="line">     *</span><br><span class="line">     * @Param [odStappService]</span><br><span class="line">     * @Return org.springframework.data.redis.stream.StreamListener&lt;java.lang.String,org.springframework.data.redis.connection.stream.MapRecord&lt;java.lang.String,java.lang.String,java.lang.String&gt;&gt;</span><br><span class="line">     * @Author 王成玮</span><br><span class="line">     * @DateTime 2020/11/11 9:40</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; statTopicLisenter(OdStappService odStappService) &#123;</span><br><span class="line">        StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; statTopicLisenter = entries -&gt; &#123;</span><br><span class="line">            Map&lt;String, String&gt; valueMap = entries.getValue();</span><br><span class="line">            String id = entries.getId().getValue();</span><br><span class="line">            log.info(&quot;接收到来自&#123;&#125;主题的消息，消息id为：&#123;&#125;，消息内容为：&#123;&#125;。&quot;, statKey, id, valueMap);</span><br><span class="line">            // 根据申请号修改状态</span><br><span class="line">            String message = valueMap.get(&quot;status&quot;);</span><br><span class="line">            if (Strings.isNotBlank(message)) &#123;</span><br><span class="line">                odStappService.updateStatByOdAppno(message);</span><br><span class="line">            &#125;</span><br><span class="line">            // 手动确认接收消息</span><br><span class="line">            stringRedisTemplate.opsForStream().acknowledge(statKey + groupSuffix, entries);</span><br><span class="line">        &#125;;</span><br><span class="line">        return statTopicLisenter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用 odStImageService.saveDicomSaveImage 处理 instKey 通道的消息</span><br><span class="line">     *</span><br><span class="line">     * @Param [odStImageService]</span><br><span class="line">     * @Return org.springframework.data.redis.stream.StreamListener&lt;java.lang.String,org.springframework.data.redis.connection.stream.MapRecord&lt;java.lang.String,java.lang.String,java.lang.String&gt;&gt;</span><br><span class="line">     * @Author 王成玮</span><br><span class="line">     * @DateTime 2020/11/11 9:47</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; instTopicLisenter(OdStImageService odStImageService) &#123;</span><br><span class="line">        StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; statTopicLisenter = entries -&gt; &#123;</span><br><span class="line">            Map&lt;String, String&gt; valueMap = entries.getValue();</span><br><span class="line">            String id = entries.getId().getValue();</span><br><span class="line">            log.info(&quot;接收到来自&#123;&#125;主题的消息，消息id为：&#123;&#125;，消息内容为：&#123;&#125;。&quot;, instKey, id, valueMap);</span><br><span class="line">            // 根据申请号修改状态</span><br><span class="line">            String instance = valueMap.get(&quot;instance&quot;);</span><br><span class="line">            if (Strings.isNotBlank(instance)) &#123;</span><br><span class="line">                DicomInstance dicomInstance = JSON.parseObject(instance, DicomInstance.class);</span><br><span class="line">                if (!ObjectUtils.isEmpty(dicomInstance)) &#123;</span><br><span class="line">                    odStImageService.saveDicomSaveImage(dicomInstance);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 手动确认接收消息</span><br><span class="line">            stringRedisTemplate.opsForStream().acknowledge(instKey + groupSuffix, entries);</span><br><span class="line">        &#125;;</span><br><span class="line">        return statTopicLisenter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用 odStSeriesService.saveDicomSeries 处理 seriesKey 通道的消息</span><br><span class="line">     *</span><br><span class="line">     * @Param [odStSeriesService]</span><br><span class="line">     * @Return org.springframework.data.redis.stream.StreamListener&lt;java.lang.String,org.springframework.data.redis.connection.stream.MapRecord&lt;java.lang.String,java.lang.String,java.lang.String&gt;&gt;</span><br><span class="line">     * @Author 王成玮</span><br><span class="line">     * @DateTime 2020/11/11 9:48</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; seriesTopicLisenter(OdStSeriesService odStSeriesService) &#123;</span><br><span class="line">        StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; statTopicLisenter = entries -&gt; &#123;</span><br><span class="line">            Map&lt;String, String&gt; valueMap = entries.getValue();</span><br><span class="line">            String id = entries.getId().getValue();</span><br><span class="line">            log.info(&quot;接收到来自&#123;&#125;主题的消息，消息id为：&#123;&#125;，消息内容为：&#123;&#125;。&quot;, seriesKey, id, valueMap);</span><br><span class="line">            // 根据申请号修改状态</span><br><span class="line">            String series = valueMap.get(&quot;series&quot;);</span><br><span class="line">            if (Strings.isNotBlank(series)) &#123;</span><br><span class="line">                DicomSeries dicomSeries = JSON.parseObject(series, DicomSeries.class);</span><br><span class="line">                if (!ObjectUtils.isEmpty(dicomSeries)) &#123;</span><br><span class="line">                    odStSeriesService.saveDicomSeries(dicomSeries);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 手动确认接收消息</span><br><span class="line">            stringRedisTemplate.opsForStream().acknowledge(seriesKey + groupSuffix, entries);</span><br><span class="line">        &#125;;</span><br><span class="line">        return statTopicLisenter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 处理 sendDcm2Dvc 通道的消息</span><br><span class="line">     *</span><br><span class="line">     * @Param [odStSeriesService]</span><br><span class="line">     * @Return org.springframework.data.redis.stream.StreamListener&lt;java.lang.String,org.springframework.data.redis.connection.stream.MapRecord&lt;java.lang.String,java.lang.String,java.lang.String&gt;&gt;</span><br><span class="line">     * @Author 王成玮</span><br><span class="line">     * @DateTime 2020/11/11 9:48</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; dcm2DvcTopicLisenter(MsgLogService msgLogService) &#123;</span><br><span class="line">        StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; dcm2DvcTopicLisenter = entries -&gt; &#123;</span><br><span class="line">            // &lt;userId,resultStr&gt;</span><br><span class="line">            Map&lt;String, String&gt; valueMap = entries.getValue();</span><br><span class="line"></span><br><span class="line">            String id = entries.getId().getValue();</span><br><span class="line">            log.info(&quot;接收到来自&#123;&#125;主题的消息，消息id为：&#123;&#125;，消息内容为：&#123;&#125;。&quot;, sendDcm2DvcTopic, id, valueMap);</span><br><span class="line">            String userId = valueMap.get(&quot;userId&quot;);</span><br><span class="line">            if (Strings.isNotBlank(userId)) &#123;</span><br><span class="line">                // 将消息发送到mq</span><br><span class="line">                MsgDto msgDto = new MsgDto();</span><br><span class="line">                msgDto.setCode(MsgCodeStatusConstant.SEND_DCM2_DEVICE);</span><br><span class="line">                // 封装消息参数</span><br><span class="line">                MsgParamDto msgParamDto = new MsgParamDto();</span><br><span class="line">                // 发送人</span><br><span class="line">                msgParamDto.setSendUserId(UserUtil.getUserId());</span><br><span class="line">                msgParamDto.setSendUserName(UserUtil.getUserName());</span><br><span class="line">                // 提醒内容</span><br><span class="line">                msgParamDto.setMsgContent(valueMap.get(&quot;resultStr&quot;));</span><br><span class="line">                // 接受范围：个人</span><br><span class="line">                msgParamDto.setReceiverType(MsgReceiverTypeEnum.PERSONAL.getCode());</span><br><span class="line">                // 接受用户</span><br><span class="line">                msgParamDto.setReceiveUser(userId);</span><br><span class="line">                // 发送标题</span><br><span class="line">                msgParamDto.setSendTitle(&quot;图像发送结果&quot;);</span><br><span class="line">                msgDto.setValues(msgParamDto);</span><br><span class="line">                // 是否立即发送</span><br><span class="line">                msgDto.setSendFlg(CommonConstant.YES);</span><br><span class="line">                // 发送时间</span><br><span class="line">                msgDto.setSendTime(SystemDateUtils.getDate());</span><br><span class="line">                msgLogService.sendMsg(msgDto);</span><br><span class="line">            &#125;</span><br><span class="line">            // 手动确认接收消息</span><br><span class="line">            stringRedisTemplate.opsForStream().acknowledge(sendDcm2DvcTopic, entries);</span><br><span class="line">        &#125;;</span><br><span class="line">        return dcm2DvcTopicLisenter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; transferDcmTopicLisenter(MsgLogService msgLogService) &#123;</span><br><span class="line">        StreamListener&lt;String, MapRecord&lt;String, String, String&gt;&gt; transferDcmTopicLisenter = entries -&gt; &#123;</span><br><span class="line">            // 解析消息内容</span><br><span class="line">            Map&lt;String, String&gt; dcmStorageInfoMap = entries.getValue();</span><br><span class="line">            String id = entries.getId().getValue();</span><br><span class="line">            log.info(&quot;接收到来自&#123;&#125;主题的消息，消息id为：&#123;&#125;，消息内容为：&#123;&#125;。&quot;, transferDcmTopic, id, dcmStorageInfoMap);</span><br><span class="line">            String osaId = dcmStorageInfoMap.get(&quot;missionId&quot;);</span><br><span class="line">            String seriesUid = dcmStorageInfoMap.get(&quot;seriesUid&quot;);</span><br><span class="line">            String imageUid = dcmStorageInfoMap.get(&quot;imageUid&quot;);</span><br><span class="line">            String storageId = dcmStorageInfoMap.get(&quot;storageId&quot;);</span><br><span class="line">            String storagePath = dcmStorageInfoMap.get(&quot;storagePath&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                // 迁移序列和dcm图像</span><br><span class="line">                if (Strings.isNotBlank(osaId)) &#123;</span><br><span class="line">                    String seriesId = odStSeriesService.transferSeriesRecord(osaId, seriesUid);</span><br><span class="line">                    if (Strings.isNotBlank(seriesId)) &#123;</span><br><span class="line">                        odStImageService.transferDcmRecord(osaId,seriesId,imageUid,storageId,storagePath);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch (Exception e)&#123;</span><br><span class="line">                log.error(&quot;处理来自&#123;&#125;主题的消息失败，序列id为：&#123;&#125;，错误信息：&#123;&#125;。&quot;, transferDcmTopic, seriesUid,e.getMessage());</span><br><span class="line">            &#125;finally &#123;</span><br><span class="line">                // 手动确认接收消息</span><br><span class="line">                stringRedisTemplate.opsForStream().acknowledge(transferDcmTopic, entries);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        return transferDcmTopicLisenter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据redisStream 名称 创建消费者组，返回组名称</span><br><span class="line">     *</span><br><span class="line">     * @Param [streamKey]</span><br><span class="line">     * @Return java.lang.String</span><br><span class="line">     * @Author 王成玮</span><br><span class="line">     * @DateTime 2020/11/11 13:59</span><br><span class="line">     */</span><br><span class="line">    private String createStreamGroup(String streamKey) &#123;</span><br><span class="line">        String groupName = streamKey + groupSuffix;</span><br><span class="line">        try &#123;</span><br><span class="line">            log.info(&quot;尝试新建消费者组：&#123;&#125;，监听通道：&#123;&#125;&quot;, groupName, streamKey);</span><br><span class="line">            // 默认添加一条无效数据，以防缺失 topic</span><br><span class="line">            StringRecord blankRecord = StreamRecords.string(Collections.singletonMap(&quot;key&quot;, &quot;value&quot;)).withStreamKey(streamKey);</span><br><span class="line">            stringRedisTemplate.opsForStream().add(blankRecord);</span><br><span class="line">            // 创建组</span><br><span class="line">            stringRedisTemplate.opsForStream().createGroup(streamKey, ReadOffset.from(&quot;0&quot;), groupName);</span><br><span class="line">        &#125; catch (RedisSystemException e) &#123;</span><br><span class="line">            log.warn(&quot;&#123;&#125; 消费者组已存在，未新建，错误信息为：&#123;&#125;&quot;, groupName, e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            return groupName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 绑定 Listener、streamKey 和 streamGroup</span><br><span class="line">     *</span><br><span class="line">     * @Param [listener, streamKey, groupName, container]</span><br><span class="line">     * @Return void</span><br><span class="line">     * @Author 王成玮</span><br><span class="line">     * @DateTime 2020/11/11 14:12</span><br><span class="line">     */</span><br><span class="line">    private void bindingListener(StreamListener listener, String streamKey, String groupName, StreamMessageListenerContainer container)</span><br><span class="line">        throws UnknownHostException &#123;</span><br><span class="line">        container.receive(Consumer.from(groupName, InetAddress.getLocalHost().getHostName() + streamKey),</span><br><span class="line">            StreamOffset.create(streamKey, ReadOffset.lastConsumed()), listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><h6 id="1-相关注解："><a href="#1-相关注解：" class="headerlink" title="1.相关注解："></a>1.相关注解：</h6><h6 id="ConditionalOnProperty"><a href="#ConditionalOnProperty" class="headerlink" title="@ConditionalOnProperty"></a>@ConditionalOnProperty</h6><p>注解说明：</p><p>通常，在开发基于Spring的应用程序时，可能需要根据配置属性的存在和值有条件地创建一些bean。</p><p>例如，取决于是否将属性值设置为“ prod”或“ test”，可能想要注册一个DataSource bean来指向生产或测试数据库。</p><p>幸运的是，实现这一目标并不像想象的那样困难。 Spring框架正是为此目的提供了@ConditionalOnProperty注解。</p><p>简而言之，@ConditionalOnProperty仅在存在环境属性且具有特定值的情况下才启用Bean注册。 默认情况下，必须定义指定的属性，并且不等于false。<br>————————————————<br>版权声明：本文为CSDN博主「盲目的拾荒者」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/niugang0920/article/details/115701528">https://blog.csdn.net/niugang0920/article/details/115701528</a></p><p>@EnableConfigurationProperties</p><p>@ConfigurationProperties(prefix &#x3D; “spring.redis”)</p><p>@EnableConfigurationProperties注解的作用是：使使用 @ConfigurationProperties 注解的类生效。</p><p>如果一个配置类只配置@ConfigurationProperties注解，而没有使用@Component，那么在IOC容器中是获取不到properties 配置文件转化的bean。说白了 @EnableConfigurationProperties 相当于把使用 @ConfigurationProperties 的类进行了一次注入。</p><p>@ConditionalOnClass 注解用法</p><p>参考地址：<a href="https://baijiahao.baidu.com/s?id=1740059649839757132&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1740059649839757132&amp;wfr=spider&amp;for=pc</a></p><p>当项目中存在某个类时，才会使标有该注解的类或方法生效</p><p>该注解可以配置两个属性，分别是value和name，其中value和name都是数组，只不过内容不一样，value是Class的数组，name是全限类名的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">开始，我一直使用value属性进行配置，但是总是报错，比如我配置</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ConditionalOnClass(value = &#123;Client.class&#125;)</span><br><span class="line">public class MyAutoConfig &#123;</span><br><span class="line">public MyAutoConfig()&#123;        System.out.println(&quot;constructor MyAutoConfig&quot;);    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">该Client是下面的类，</span><br><span class="line"></span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.Client</span><br><span class="line">它是ES中的一个类，我本身配置的含义是只有在Client存在的时候MyAutoConfig才会生效，但是总是不成功。你知道为什么不成功吗？</span><br><span class="line"></span><br><span class="line">这是因为我没有引ES的依赖，导致在我的classpath中没有这个类，按照@ConditionalOnClass的理解，应该是不存在则不会生效，但是由于没有这个类，导致的问题是：无法编译，提示下面的错误</span><br><span class="line"></span><br><span class="line">java: 找不到符号  符号: 类 Client</span><br><span class="line">这是可以理解的，因为没有这个类，而我要引用这个类肯定是引用不到的，所以编译是失败的，也就程序跑不起来。那么存在一个问题，@ConditionalOnClass注解的value属性要在什么情况下使用？</span><br><span class="line"></span><br><span class="line">这里有一个mybatisplus的配置类，</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其配置类上标识了@ConditionalOnClass注解，该注解中配置了value属性，且配置了SqlSessionFactory和SqlSessionFactoryBean两个类，</span><br><span class="line"></span><br><span class="line">MyBatisPlusAutoConfiguration是在mybatis-plus-boot-starter的jar包下</span><br><span class="line"></span><br><span class="line">SqlSessionFactory是在mybatis的jar包下</span><br><span class="line"></span><br><span class="line">SqlSessionFactoryBean是在mybaits-spring的jar包下</span><br><span class="line"></span><br><span class="line">这三个类分属于不同的jar包，如果我在一个项目中引入了mybatis-plus-boot-starter的jar包，没有引入mybatis的jar包那么MybatisPlusAutoConfiguration不会生效，也就是只有mybatis和mybatis-spring的jar包都引入了，MybatisPlusAutoConfiguration才会生效，才会被纳入spring容器的管理。</span><br><span class="line"></span><br><span class="line">需要注意一点：为了防止少引包，在mybatis-plus-boot-starter中会依赖mybatis和mybatis-spring，这也是starter的好处，不会少引包，需要哪些依赖它都引好了。</span><br><span class="line"></span><br><span class="line">那么再回到问题的开始，为什么，我配置了一个不存在的类就没成功，那是因为java的源文件需要编译，在编译时会检查类是否存在，不存在肯定是编译不通过的；而如果引用的是jar包中的文件引用另外一个jar的，则是因为jar包经过了编译，已经打包成功了，故不存在问题。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>@ConditionalOnClass注解有两个属性，分别是value和name，注意其配置方式；</p></li><li><p>@ConditionalOnClass注解判断配置的类是否存在的方式是通过Class.forName的方式；</p></li></ol><h3 id="2-其他拓展"><a href="#2-其他拓展" class="headerlink" title="2.其他拓展"></a>2.其他拓展</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> NOSQL </tag>
            
            <tag> 分布式缓存 </tag>
            
            <tag> Redission </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实战</title>
      <link href="/2022/06/16/Spring/SpringBoot_1%E5%85%A8%E5%B1%80%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/06/16/Spring/SpringBoot_1%E5%85%A8%E5%B1%80%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="1-全局事务"><a href="#1-全局事务" class="headerlink" title="1.全局事务"></a>1.全局事务</h2><h4 id="1-创建TransactionAdviceConfig类"><a href="#1-创建TransactionAdviceConfig类" class="headerlink" title="1.创建TransactionAdviceConfig类"></a>1.创建TransactionAdviceConfig类</h4><p>使用注解，@Aspect  @Configuration 来声明配置类及切面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 全局事务控制</span><br><span class="line"> */</span><br><span class="line">@Aspect</span><br><span class="line">@Configuration</span><br><span class="line">public class TransactionAdviceConfig &#123;</span><br></pre></td></tr></table></figure><h4 id="2-注入TransactionManager事务管理器"><a href="#2-注入TransactionManager事务管理器" class="headerlink" title="2.注入TransactionManager事务管理器"></a>2.注入TransactionManager事务管理器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//设置切点表达式常量</span><br><span class="line">private static final String AOP_POINTCUT_EXPRESSION = &quot;execution(* com.mozi..service..*.*(..))&quot;;</span><br><span class="line"></span><br><span class="line">   @Autowired</span><br><span class="line">   private TransactionManager transactionManager;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3创建-TransactionInterceptor-Bean-通知"><a href="#3创建-TransactionInterceptor-Bean-通知" class="headerlink" title="3创建.TransactionInterceptor@Bean 通知"></a>3创建.TransactionInterceptor@Bean 通知</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">   public TransactionInterceptor txAdvice() &#123;</span><br><span class="line">       // 事务管理规则，声明具备事务管理的方法名</span><br><span class="line">       NameMatchTransactionAttributeSource source = new NameMatchTransactionAttributeSource();</span><br><span class="line">       source.addTransactionalMethod(&quot;add*&quot;, requiredTransactionRule());</span><br><span class="line">       source.addTransactionalMethod(&quot;save*&quot;, requiredTransactionRule());</span><br><span class="line">       source.addTransactionalMethod(&quot;insert*&quot;, requiredTransactionRule());</span><br><span class="line">       source.addTransactionalMethod(&quot;update*&quot;, requiredTransactionRule());</span><br><span class="line">       source.addTransactionalMethod(&quot;delete*&quot;, requiredTransactionRule());</span><br><span class="line">       source.addTransactionalMethod(&quot;batch*&quot;, requiredTransactionRule());</span><br><span class="line">       source.addTransactionalMethod(&quot;do*&quot;, requiredTransactionRule());</span><br><span class="line">       source.addTransactionalMethod(&quot;(?!add*|save*|insert*|update*|delete*|batch*|do*)^.*$&quot;, readOnlyTransactionRule());</span><br><span class="line">       return new TransactionInterceptor(transactionManager, source);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-设置切面-Advisor-Bean"><a href="#4-设置切面-Advisor-Bean" class="headerlink" title="4.设置切面 Advisor @Bean"></a>4.设置切面 Advisor @Bean</h4><p>切点 + 通知</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 利用AspectJExpressionPointcut设置切面=切点+通知（写成内部bean的方式）</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Advisor txAdviceAdvisor() &#123;</span><br><span class="line">        // 声明切点的面</span><br><span class="line">        AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();</span><br><span class="line">        // 声明和设置需要拦截的方法,用切点语言描写</span><br><span class="line">        pointcut.setExpression(AOP_POINTCUT_EXPRESSION);</span><br><span class="line">        // 设置切面=切点pointcut+通知TxAdvice</span><br><span class="line">        return new DefaultPointcutAdvisor(pointcut, txAdvice());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-设置事务传播行为-RuleBasedTransactionAttribute"><a href="#5-设置事务传播行为-RuleBasedTransactionAttribute" class="headerlink" title="5.设置事务传播行为 RuleBasedTransactionAttribute"></a>5.设置事务传播行为 RuleBasedTransactionAttribute</h4><p>存在异常就回滚，REQUIRED</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 当前存在事务就使用当前事务，当前不存在事务就创建一个新的事务</span><br><span class="line">     * &#123;@link org.springframework.transaction.annotation.Propagation#REQUIRED&#125;</span><br><span class="line">     */</span><br><span class="line">    private RuleBasedTransactionAttribute requiredTransactionRule() &#123;</span><br><span class="line">        RuleBasedTransactionAttribute required = new RuleBasedTransactionAttribute();</span><br><span class="line">        // 添加对所有异常进行事务回滚</span><br><span class="line">        required.setRollbackRules(Collections.singletonList(new RollbackRuleAttribute(Exception.class)));</span><br><span class="line">        // PROPAGATION_REQUIRED:事务隔离性为1，若当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是 默认值。</span><br><span class="line">        required.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line">        // 设置事务失效时间，如果超过5秒，则回滚事务</span><br><span class="line">        // required.setTimeout(TransactionDefinition.TIMEOUT_DEFAULT);</span><br><span class="line">        return required;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只读事务，PROPAGATION_NOT_SUPPORTED</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 只读事务 &#123;@link org.springframework.transaction.annotation.Propagation#NOT_SUPPORTED&#125;</span><br><span class="line">    */</span><br><span class="line">   private RuleBasedTransactionAttribute readOnlyTransactionRule() &#123;</span><br><span class="line">       RuleBasedTransactionAttribute readOnly = new RuleBasedTransactionAttribute();</span><br><span class="line">       // 设置当前事务是否为只读事务，true为只读</span><br><span class="line">       readOnly.setReadOnly(true);</span><br><span class="line">       // transactiondefinition 定义事务的隔离级别； PROPAGATION_NOT_SUPPORTED事务传播级别5，以非事务运行，如果当前存在事务，则把当前事务挂起</span><br><span class="line">       readOnly.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);</span><br><span class="line">       return readOnly;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>6.整体代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">package com.mozi.corex.config.datasource;</span><br><span class="line"></span><br><span class="line">import java.util.Collections;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.springframework.aop.Advisor;</span><br><span class="line">import org.springframework.aop.aspectj.AspectJExpressionPointcut;</span><br><span class="line">import org.springframework.aop.support.DefaultPointcutAdvisor;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.transaction.TransactionDefinition;</span><br><span class="line">import org.springframework.transaction.TransactionManager;</span><br><span class="line">import org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource;</span><br><span class="line">import org.springframework.transaction.interceptor.RollbackRuleAttribute;</span><br><span class="line">import org.springframework.transaction.interceptor.RuleBasedTransactionAttribute;</span><br><span class="line">import org.springframework.transaction.interceptor.TransactionInterceptor;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 全局事务控制</span><br><span class="line"> */</span><br><span class="line">@Aspect</span><br><span class="line">@Configuration</span><br><span class="line">public class TransactionAdviceConfig &#123;</span><br><span class="line"></span><br><span class="line">    private static final String AOP_POINTCUT_EXPRESSION = &quot;execution(* com.mozi..service..*.*(..))&quot;;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public TransactionInterceptor txAdvice() &#123;</span><br><span class="line">        // 事务管理规则，声明具备事务管理的方法名</span><br><span class="line">        NameMatchTransactionAttributeSource source = new NameMatchTransactionAttributeSource();</span><br><span class="line">        source.addTransactionalMethod(&quot;add*&quot;, requiredTransactionRule());</span><br><span class="line">        source.addTransactionalMethod(&quot;save*&quot;, requiredTransactionRule());</span><br><span class="line">        source.addTransactionalMethod(&quot;insert*&quot;, requiredTransactionRule());</span><br><span class="line">        source.addTransactionalMethod(&quot;update*&quot;, requiredTransactionRule());</span><br><span class="line">        source.addTransactionalMethod(&quot;delete*&quot;, requiredTransactionRule());</span><br><span class="line">        source.addTransactionalMethod(&quot;batch*&quot;, requiredTransactionRule());</span><br><span class="line">        source.addTransactionalMethod(&quot;do*&quot;, requiredTransactionRule());</span><br><span class="line">        source.addTransactionalMethod(&quot;(?!add*|save*|insert*|update*|delete*|batch*|do*)^.*$&quot;, readOnlyTransactionRule());</span><br><span class="line">        return new TransactionInterceptor(transactionManager, source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 利用AspectJExpressionPointcut设置切面=切点+通知（写成内部bean的方式）</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Advisor txAdviceAdvisor() &#123;</span><br><span class="line">        // 声明切点的面</span><br><span class="line">        AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();</span><br><span class="line">        // 声明和设置需要拦截的方法,用切点语言描写</span><br><span class="line">        pointcut.setExpression(AOP_POINTCUT_EXPRESSION);</span><br><span class="line">        // 设置切面=切点pointcut+通知TxAdvice</span><br><span class="line">        return new DefaultPointcutAdvisor(pointcut, txAdvice());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 当前存在事务就使用当前事务，当前不存在事务就创建一个新的事务</span><br><span class="line">     * &#123;@link org.springframework.transaction.annotation.Propagation#REQUIRED&#125;</span><br><span class="line">     */</span><br><span class="line">    private RuleBasedTransactionAttribute requiredTransactionRule() &#123;</span><br><span class="line">        RuleBasedTransactionAttribute required = new RuleBasedTransactionAttribute();</span><br><span class="line">        // 添加对所有异常进行事务回滚</span><br><span class="line">        required.setRollbackRules(Collections.singletonList(new RollbackRuleAttribute(Exception.class)));</span><br><span class="line">        // PROPAGATION_REQUIRED:事务隔离性为1，若当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是 默认值。</span><br><span class="line">        required.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line">        // 设置事务失效时间，如果超过5秒，则回滚事务</span><br><span class="line">        // required.setTimeout(TransactionDefinition.TIMEOUT_DEFAULT);</span><br><span class="line">        return required;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 只读事务 &#123;@link org.springframework.transaction.annotation.Propagation#NOT_SUPPORTED&#125;</span><br><span class="line">     */</span><br><span class="line">    private RuleBasedTransactionAttribute readOnlyTransactionRule() &#123;</span><br><span class="line">        RuleBasedTransactionAttribute readOnly = new RuleBasedTransactionAttribute();</span><br><span class="line">        // 设置当前事务是否为只读事务，true为只读</span><br><span class="line">        readOnly.setReadOnly(true);</span><br><span class="line">        // transactiondefinition 定义事务的隔离级别； PROPAGATION_NOT_SUPPORTED事务传播级别5，以非事务运行，如果当前存在事务，则把当前事务挂起</span><br><span class="line">        readOnly.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);</span><br><span class="line">        return readOnly;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA卡在启动页面</title>
      <link href="/2022/05/14/Jetbrian/IDEA%202021.1.2%20%E7%9A%84%E5%90%AF%E5%8A%A8%E5%8D%A1%E5%9C%A8LOGO%E7%95%8C%E9%9D%A2%E7%9A%84%E7%90%A2%E7%A3%A8/"/>
      <url>/2022/05/14/Jetbrian/IDEA%202021.1.2%20%E7%9A%84%E5%90%AF%E5%8A%A8%E5%8D%A1%E5%9C%A8LOGO%E7%95%8C%E9%9D%A2%E7%9A%84%E7%90%A2%E7%A3%A8/</url>
      
        <content type="html"><![CDATA[<p>今天在IDEA 中启用了一个插件，等待重启之后卡在启动界面。</p><p>就像这样（长得花里胡哨的）：<br><img src="https://www.proyy.com/skycj/data/images/2021-07-03/4e84a7484e92a43dc5fc1ec3d5ac7c42.jpg" alt="image.png"></p><p>机智的我打开任务管理器查看，IDEA的进程内存占用900M左右，CPU占用率为0，磁盘读写速度0。按照国际惯例，只有启动成功了啥事没干才会这样，可是界面明显是卡死了，故，找日志吧。</p><p>IDEA 的默认日志路径在 “C:\Users&lt;用户名&gt;\AppData\Local\JetBrains\IntelliJIdea&lt;版本&gt;\log”</p><p>拖到最下面发现如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line">2021-07-02 22:25:32,111 [  33975]  ERROR -   #com.intellij.util.SVGLoader - Recursive update </span><br><span class="line"></span><br><span class="line">java.lang.IllegalStateException: Recursive update</span><br><span class="line"></span><br><span class="line">  at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1760)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVStore.getChunk(MVStore.java:1376)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVStore.readPage(MVStore.java:2607)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.NonLeafPage.getChildPage(NonLeafPage.java:62)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.Page.get(Page.java:205)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVMap.get(MVMap.java:372)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVStore.lambda$getChunk$4(MVStore.java:1378)</span><br><span class="line"></span><br><span class="line">  at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1705)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVStore.getChunk(MVStore.java:1376)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVStore.readPage(MVStore.java:2607)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.NonLeafPage.getChildPage(NonLeafPage.java:62)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.Page.get(Page.java:205)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVMap.get(MVMap.java:372)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVStore.lambda$getChunk$4(MVStore.java:1378)</span><br><span class="line"></span><br><span class="line">  at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1705)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVStore.getChunk(MVStore.java:1376)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVStore.readPage(MVStore.java:2607)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.NonLeafPage.getChildPage(NonLeafPage.java:62)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.NonLeafPage.getPrependCursorPos(NonLeafPage.java:194)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.Cursor.traverseDown(Cursor.java:163)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.Cursor.&lt;init&gt;(Cursor.java:40)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVMap.cursor(MVMap.java:617)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVMap.cursor(MVMap.java:604)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVMap.cursor(MVMap.java:592)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVStore.readStoreHeader(MVStore.java:922)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVStore.&lt;init&gt;(MVStore.java:450)</span><br><span class="line"></span><br><span class="line">  at org.jetbrains.mvstore.MVStore$Builder.openOrNewOnIoError(MVStore.java:3996)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ui.svg.SvgCacheManager.&lt;init&gt;(SvgCacheManager.java:59)</span><br><span class="line"></span><br><span class="line">  at com.intellij.util.SVGLoader$SvgCache.&lt;clinit&gt;(SVGLoader.java:84)</span><br><span class="line"></span><br><span class="line">  at com.intellij.util.SVGLoader.load(SVGLoader.java:217)</span><br><span class="line"></span><br><span class="line">  at com.intellij.util.ImageLoader.loadByDescriptorWithoutCache(ImageLoader.java:261)</span><br><span class="line"></span><br><span class="line">  at com.intellij.util.ImageLoader.loadByDescriptor(ImageLoader.java:227)</span><br><span class="line"></span><br><span class="line">  at com.intellij.util.ImageLoader.loadImage(ImageLoader.java:152)</span><br><span class="line"></span><br><span class="line">  at com.intellij.openapi.util.IconLoader$ResolvedImageDataResolver.loadImage(IconLoader.java:1057)</span><br><span class="line"></span><br><span class="line">  at com.intellij.openapi.util.IconLoader$CachedImageIcon.loadImage(IconLoader.java:936)</span><br><span class="line"></span><br><span class="line">  at com.intellij.openapi.util.IconLoader$ScaledIconCache.getOrScaleIcon(IconLoader.java:1005)</span><br><span class="line"></span><br><span class="line">  at com.intellij.openapi.util.IconLoader$CachedImageIcon.getRealIcon(IconLoader.java:824)</span><br><span class="line"></span><br><span class="line">  at com.intellij.openapi.util.IconLoader$CachedImageIcon.getIconWidth(IconLoader.java:752)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ui.AppUIUtil.scaleIconToSize(AppUIUtil.java:185)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ui.AppUIUtil.loadApplicationIcon(AppUIUtil.java:181)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ui.AppUIUtil.loadApplicationIcon(AppUIUtil.java:152)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.U.a(U.java:307)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.U.a(U.java:240)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.F.a(F.java:95)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.F.&lt;init&gt;(F.java:50)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.s.&lt;init&gt;(s.java:251)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.L.a(L.java:52)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.L.a(L.java:45)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.c.aI.a(aI.java:322)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.g.a(g.java:215)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:303)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:776)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:727)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)</span><br><span class="line"></span><br><span class="line">  at java.base/java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line"></span><br><span class="line">  at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:746)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:419)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)</span><br><span class="line"></span><br><span class="line">2021-07-02 22:25:32,119 [  33983]  ERROR -   #com.intellij.util.SVGLoader - IntelliJ IDEA 2021.1.2  Build #IU-211.7442.40 </span><br><span class="line"></span><br><span class="line">2021-07-02 22:25:32,126 [  33990]  ERROR -   #com.intellij.util.SVGLoader - JDK: 11.0.11; VM: Dynamic Code Evolution 64-Bit Server VM; Vendor: JetBrains s.r.o. </span><br><span class="line"></span><br><span class="line">2021-07-02 22:25:32,126 [  33990]  ERROR -   #com.intellij.util.SVGLoader - OS: Windows 10 </span><br><span class="line"></span><br><span class="line">2021-07-02 22:25:32,128 [  33992]   WARN -        #com.intellij.idea.Main -  </span><br><span class="line"></span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1373)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1348)</span><br><span class="line"></span><br><span class="line">  at com.intellij.idea.StartupUtil.runInEdtAndWait(StartupUtil.java:845)</span><br><span class="line"></span><br><span class="line">  at com.intellij.idea.StartupUtil$1.invokeAndWait(StartupUtil.java:305)</span><br><span class="line"></span><br><span class="line">  at com.intellij.util.ui.EdtInvocationManager.invokeAndWaitIfNeeded(EdtInvocationManager.java:152)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.g.a(g.java:209)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.c.aI.a(aI.java:317)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.c.aq.c(aq.java:182)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.c.aq.a(aq.java:81)</span><br><span class="line"></span><br><span class="line">  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line"></span><br><span class="line">  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line"></span><br><span class="line">  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line"></span><br><span class="line">  at java.base/java.lang.reflect.Method.invoke(Method.java:566)</span><br><span class="line"></span><br><span class="line">  at com.intellij.idea.MainImpl.start(MainImpl.java:96)</span><br><span class="line"></span><br><span class="line">  at com.intellij.idea.StartupUtil.startApp(StartupUtil.java:310)</span><br><span class="line"></span><br><span class="line">  at com.intellij.idea.StartupUtil.prepareApp(StartupUtil.java:250)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.plugins.MainRunner.lambda$start$1(MainRunner.java:41)</span><br><span class="line"></span><br><span class="line">  at java.base/java.lang.Thread.run(Thread.java:829)</span><br><span class="line"></span><br><span class="line">Caused by: java.lang.NullPointerException</span><br><span class="line"></span><br><span class="line">  at com.intellij.util.SVGLoader.load(SVGLoader.java:217)</span><br><span class="line"></span><br><span class="line">  at com.intellij.util.ImageLoader.loadByDescriptorWithoutCache(ImageLoader.java:261)</span><br><span class="line"></span><br><span class="line">  at com.intellij.util.ImageLoader.loadByDescriptor(ImageLoader.java:227)</span><br><span class="line"></span><br><span class="line">  at com.intellij.util.ImageLoader.loadImage(ImageLoader.java:152)</span><br><span class="line"></span><br><span class="line">  at com.intellij.openapi.util.IconLoader$ResolvedImageDataResolver.loadImage(IconLoader.java:1057)</span><br><span class="line"></span><br><span class="line">  at com.intellij.openapi.util.IconLoader$CachedImageIcon.loadImage(IconLoader.java:936)</span><br><span class="line"></span><br><span class="line">  at com.intellij.openapi.util.IconLoader$ScaledIconCache.getOrScaleIcon(IconLoader.java:1005)</span><br><span class="line"></span><br><span class="line">  at com.intellij.openapi.util.IconLoader$CachedImageIcon.getRealIcon(IconLoader.java:824)</span><br><span class="line"></span><br><span class="line">  at com.intellij.openapi.util.IconLoader$CachedImageIcon.getIconWidth(IconLoader.java:752)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ui.AppUIUtil.scaleIconToSize(AppUIUtil.java:185)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ui.AppUIUtil.loadApplicationIcon(AppUIUtil.java:181)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ui.AppUIUtil.loadApplicationIcon(AppUIUtil.java:152)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.U.a(U.java:307)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.U.a(U.java:240)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.F.a(F.java:95)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.F.&lt;init&gt;(F.java:50)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.s.&lt;init&gt;(s.java:251)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.L.a(L.java:52)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.L.a(L.java:45)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.c.aI.a(aI.java:322)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.b.j.g.a(g.java:215)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:303)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:776)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:727)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)</span><br><span class="line"></span><br><span class="line">  at java.base/java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line"></span><br><span class="line">  at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:746)</span><br><span class="line"></span><br><span class="line">  at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:419)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)</span><br><span class="line"></span><br><span class="line">  at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)</span><br><span class="line"></span><br><span class="line">&lt;span class=&quot;copy-code-btn&quot;&gt;复制代码&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>看起来像是跟SVG有关？<br>闲来无事搜一搜，哎，还真有。</p><p><img src="https://www.proyy.com/skycj/data/images/2021-07-03/492c5ce051e314bf61368a3954971e32.jpg" alt="image.png"><br>这老哥的错误看起来我跟这个类似，那就尝试抄一下作业。</p><p><img src="https://www.proyy.com/skycj/data/images/2021-07-03/71559ff2e7a2523b01226c35f87a6275.jpg" alt="image.png"></p><p>emmmm，要我删掉这个 cache 目录，他这是个 mac的路径吧，对应到Windows就是”C:\Users&lt;用户名&gt;\AppData\Local\JetBrains\IntelliJIdea&lt;版本&gt;”。</p><p>先给“IntelliJIdea2021.1”目录改成“IntelliJIdea2021.1_b”，然后重启，嘿，它就好了。</p><p>观察目录变化，IDEA 在“JetBrains”目录下创建了一个“IntelliJIdea2021.1目录”，里面有个0KB的“icons-v2.db”文件，而旧的“IntelliJIdea2021.1_b”文件却是 38388KB，难道是这玩意损坏了？</p><p>抱着尝试的心态，把新的“IntelliJIdea2021.1”删掉，“IntelliJIdea2021.1_b”改成“IntelliJIdea2021.1”，删掉“icons-v2.db”，然后启动 IDEA。</p><p>果然，又可以愉快的玩耍了。</p><p>那么“icons-v2.db”究竟是怎么损坏的呢？我想可能是由于太阳高能粒子轰击我的 CPU 导致某一位突变而写坏了文件罢。</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> JetBrain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器部署</title>
      <link href="/2022/05/13/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/05/13/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h1><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><h3 id="1-ntp时间服务器"><a href="#1-ntp时间服务器" class="headerlink" title="1.ntp时间服务器"></a>1.ntp时间服务器</h3><p>ntp时间服务器的搭建主要是用来给其他主机提供时间同步服务，在搭建服务器集群的时候，需要保证各个节点的时间是一致的。</p><p>在配置时钟同步服务器时第一次同步时间时，使用ntpdate命令；后续通过ntpd服务与服务器同步时间。搭建NTP服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">一、在Centos8安装ntp出现问题</span><br><span class="line">centos 8 执行 ntpdate 会出现以下错误</span><br><span class="line"></span><br><span class="line">No match for argument: ntpdate Error: Unable to find a match: ntpdate</span><br><span class="line">原因：在CentOS8.0中默认不再支持ntp软件包，时间同步将由chrony来实现</span><br><span class="line"></span><br><span class="line">二、解决方法</span><br><span class="line">1. 通过wlnmp方式</span><br><span class="line"></span><br><span class="line">添加wlnmp的yum源</span><br><span class="line"></span><br><span class="line"># rpm -ivh http://mirrors.wlnmp.com/centos/wlnmp-release-centos.noarch.rpm</span><br><span class="line">安装ntp服务</span><br><span class="line"></span><br><span class="line"># yum -y install wntp</span><br><span class="line">时间同步</span><br><span class="line"></span><br><span class="line"># ntpdate ntp1.aliyun.com</span><br><span class="line">2. 通过同步目标服务器方式</span><br><span class="line"></span><br><span class="line">2.1.centos8 里是预安装的，没有安装的话执行以下命令：</span><br><span class="line"></span><br><span class="line"># yum -y install chrony</span><br><span class="line">2.2. 启动并加入开机自启动（根据实际情况选择或不选）</span><br><span class="line"></span><br><span class="line"># systemctl enable chronyd.service</span><br><span class="line"># systemctl restart chronyd.service</span><br><span class="line"># systemctl status chronyd.service</span><br><span class="line">2.3. 修改配置文件</span><br><span class="line"></span><br><span class="line">vi /etc/chrony.conf</span><br><span class="line">原配置</span><br><span class="line"></span><br><span class="line">2 # Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class="line">3 pool 2.centos.pool.ntp.org iburst</span><br><span class="line">修改</span><br><span class="line"></span><br><span class="line">2 # Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class="line">3   pool 2.centos.pool.ntp.org iburst</span><br><span class="line">    server 目标服务器IP iburst</span><br><span class="line"> 在做hadoop集群时，为了保证三台服务器的时间一致性，可将主机IP设置为目标服务器IP。</span><br><span class="line"></span><br><span class="line">保存退出，重启chronyd服务。</span><br></pre></td></tr></table></figure><p><strong>Ø</strong> <em><strong>*搭建*</strong></em><em><strong>*C*</strong></em><em><strong>*lient*</strong></em></p><p>\1. 其他服务器操作配置一致，操作步骤前4步与Server端操作一致。</p><p>\2. 修改配置文件，将刚刚搭建好的NTP服务器作为客户端上游时间服务器</p><p>[root@localhost ~]# vim &#x2F;etc&#x2F;ntp.conf</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml3632\wps10.jpg" alt="img"> </p><p>注释掉图中的4行，添加以下三行。</p><p>server 192.168.253.100</p><p>#配置允许上游时间服务器主动修改本机的时间</p><p>restrict 192.168.253.100 nomodify notrap noquery</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml3632\wps11.jpg" alt="img"> </p><p>\3. 与本地ntpd Server同步一下</p><p>[root@localhost media]# ntpdate -u 192.168.253.100</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml3632\wps12.jpg" alt="img"> </p><p>\4. 启动ntp服务</p><p>[root@localhost media]# systemctl start ntpd</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml3632\wps13.jpg" alt="img"> </p><p>\5. 设置开机启动</p><p>[root@localhost ~]# systemctl enable ntpd</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml3632\wps14.jpg" alt="img"> </p><p>\6. 查看状态</p><p>[root@localhost media]# ntpq -p</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml3632\wps15.jpg" alt="img"> </p><p>\7. ntp时间服务搭建结束</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github拉取hexo相关问题</title>
      <link href="/2022/04/12/github%E6%8B%89%E5%8F%96hexo%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/12/github%E6%8B%89%E5%8F%96hexo%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="github拉取hexo相关问题"><a href="#github拉取hexo相关问题" class="headerlink" title="github拉取hexo相关问题"></a>github拉取hexo相关问题</h2><p>解决从github上面拉取hexo博客项目，拉取失败，拉取成功后hexo命令失效的问题。</p><h2 id="无法从github拉取项目"><a href="#无法从github拉取项目" class="headerlink" title="无法从github拉取项目"></a>无法从github拉取项目</h2><h3 id="出现remote-Repository-not-found"><a href="#出现remote-Repository-not-found" class="headerlink" title="出现remote: Repository not found"></a>出现remote: Repository not found</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span>  git@github.com:用户名/仓库名.git</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F:\myblog\MyBlog\blog&gt;hexo s</span><br><span class="line">ERROR Cannot find module <span class="string">&#x27;hexo&#x27;</span> from <span class="string">&#x27;F:\myblog\MyBlog\blog&#x27;</span></span><br><span class="line">ERROR Local hexo loading failed <span class="keyword">in</span> F:\myblog\MyBlog\blog</span><br><span class="line">ERROR Try running: <span class="string">&#x27;rm -rf node_modules &amp;&amp; npm install --force&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="修复hexo-util命令"><a href="#修复hexo-util命令" class="headerlink" title="修复hexo-util命令"></a>修复hexo-util命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install hexo-util --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring实战</title>
      <link href="/2022/03/12/Spring/SpringAOP/"/>
      <url>/2022/03/12/Spring/SpringAOP/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring实战"><a href="#Spring实战" class="headerlink" title="Spring实战"></a>Spring实战</h1><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="1-两种AOP代理模式"><a href="#1-两种AOP代理模式" class="headerlink" title="1.两种AOP代理模式"></a>1.两种AOP代理模式</h3><p>a.AspectJ 静态代理</p><p>b.SpringAOP动态代理</p><h3 id="2-SpringAOP两种动态代理方式"><a href="#2-SpringAOP两种动态代理方式" class="headerlink" title="2.SpringAOP两种动态代理方式"></a>2.SpringAOP两种动态代理方式</h3><p>a.cglib 创建子类 </p><p>b.jdk 实现接口 InvocationHandler 重写invoke方法</p><h3 id="3-项目中使用"><a href="#3-项目中使用" class="headerlink" title="3.项目中使用"></a>3.项目中使用</h3><p>1.日志切面</p><p>2.全局事务切面</p><p>3.认证切面</p><h4 id="4-使用经验"><a href="#4-使用经验" class="headerlink" title="4.使用经验"></a>4.使用经验</h4><p>使用Aspectj静态代理方式，编写日志切面，配合RabbitMQ异步消息，进行日志表持久化</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
            <tag> FrameWork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令(二)</title>
      <link href="/2022/01/11/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%BA%8C)/"/>
      <url>/2022/01/11/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux常用命令-二"><a href="#Linux常用命令-二" class="headerlink" title="Linux常用命令(二)"></a>Linux常用命令(二)</h2><h3 id="1-vim显示行号"><a href="#1-vim显示行号" class="headerlink" title="1.vim显示行号"></a>1.vim显示行号</h3><p><strong>a.临时显示</strong></p><p>1.使用 vi 或者vim 命令打开文件</p><p>2.直接输入以下命令，按Ente健 显示文件行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set number   或者 :set nu</span><br></pre></td></tr></table></figure><p><strong>b.永久显示</strong></p><p>vi ~&#x2F;.vimrc</p><p>添加 set nu</p><p>:wq 保存</p><h3 id="2-修改文件权限"><a href="#2-修改文件权限" class="headerlink" title="2.修改文件权限"></a>2.修改文件权限</h3><p>添加最大权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +777 [文件名]</span><br></pre></td></tr></table></figure><p>添加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x [文件名]</span><br></pre></td></tr></table></figure><h3 id="chmod-x-和-chmod-u-x的区别"><a href="#chmod-x-和-chmod-u-x的区别" class="headerlink" title="chmod +x 和 chmod u+x的区别"></a>chmod +x 和 chmod u+x的区别</h3><h4 id="设置谁拥有执行这个文件权限"><a href="#设置谁拥有执行这个文件权限" class="headerlink" title="设置谁拥有执行这个文件权限"></a>设置谁拥有执行这个文件权限</h4><p>u 代表用户<br>g 代表用户组<br>o 代表其他<br>a 代表所有<br>这意味着chmod u+x somefile 只授予这个文件的所属者执行的权限</p><p>而 chmod +x somefile 和 chmod a+x somefile 是一样的</p><p>Just doing +x will apply it to ali flags: [u]ser, [g]roup, [o]thers.</p><h3 id="chmod-755，chmod-777区别："><a href="#chmod-755，chmod-777区别：" class="headerlink" title="chmod +755，chmod +777区别："></a>chmod +755，chmod +777区别：</h3><p>在linux终端先输入ll,可以看到如:<br>   -rwx-r–r– (一共10个参数) 表示文件所属组和用户的对应权限。<br>第一个跟参数属于管理员，跟chmod无关。</p><p>2-4参数:属于user</p><p>5-7参数:属于group</p><p>8-10参数:属于others</p><p>r&#x3D;&#x3D;&gt;可读  w&#x3D;&#x3D;&gt;可写  x&#x3D;&#x3D;&gt;可执行<br>r&#x3D;4      w&#x3D;2      x&#x3D;1</p><p>从2-10来看：</p><p>755代表  rwx r-x r-x </p><p>777 代表 rwx rwx rwx 所有用户都可读可写可执行。</p><h3 id="3-删除文件-x2F-文件夹"><a href="#3-删除文件-x2F-文件夹" class="headerlink" title="3.删除文件&#x2F;文件夹"></a>3.删除文件&#x2F;文件夹</h3><p>rm -rf [文件]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">强制删除文件/文件夹（忽略提醒）</span><br><span class="line">rm -fr x.csv</span><br><span class="line">rm -fr test (test为目录名)</span><br><span class="line">-r 强制删除</span><br><span class="line">-f 忽略提示</span><br></pre></td></tr></table></figure><h3 id="4-查看linux系统位数"><a href="#4-查看linux系统位数" class="headerlink" title="4.查看linux系统位数"></a>4.查看linux系统位数</h3><p>getconf LONG_BIT</p><h3 id="5-查看安装的版本号"><a href="#5-查看安装的版本号" class="headerlink" title="5.查看安装的版本号"></a>5.查看安装的版本号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcc -v</span><br><span class="line"></span><br><span class="line">yum --version</span><br><span class="line"></span><br><span class="line">jdk -version</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-解压tar包"><a href="#6-解压tar包" class="headerlink" title="6.解压tar包"></a>6.解压tar包</h3><p>tar -zxvf  redis7.0.GA.tar</p><h3 id="7-新建文件夹"><a href="#7-新建文件夹" class="headerlink" title="7.新建文件夹"></a>7.新建文件夹</h3><p>mkdir myredis</p><h3 id="8-复制文件"><a href="#8-复制文件" class="headerlink" title="8.复制文件"></a>8.复制文件</h3><p>cp redis.conf  myredis&#x2F;redis7.conf</p><h3 id="9-vim中查询文字"><a href="#9-vim中查询文字" class="headerlink" title="9.vim中查询文字"></a>9.vim中查询文字</h3><p>ESC+”&quot;(查找内容)</p><p><img src="https://cdn.jsdelivr.net/gh/yinzhenCoder/pic-bed@main/img/image-20230306183031548.png" alt="image-20230306183031548"></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell遇到的问题</title>
      <link href="/2022/01/11/Linux/Shell%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/01/11/Linux/Shell%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Shell遇到的问题"><a href="#Shell遇到的问题" class="headerlink" title="Shell遇到的问题"></a>Shell遇到的问题</h2><h3 id="1-sh文件出现错误：Permission-denied"><a href="#1-sh文件出现错误：Permission-denied" class="headerlink" title="1.sh文件出现错误：Permission denied"></a>1.sh文件出现错误：Permission denied</h3><p><strong>解决办法：</strong></p><p>添加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x [文件名]</span><br></pre></td></tr></table></figure><h3 id="2-sh执行报错-missing-96-’"><a href="#2-sh执行报错-missing-96-’" class="headerlink" title="2.sh执行报错: [: missing &#96;]’"></a>2.sh执行报错: [: missing &#96;]’</h3><p><strong>脚本如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1 #!/bin/bash</span><br><span class="line">2 a=&quot;yz&quot;</span><br><span class="line">3 b=&quot;yt&quot;</span><br><span class="line">4 if [ $a = $b]</span><br><span class="line">5         then</span><br><span class="line">6                 echo &quot;$a 等于 $b &quot;</span><br><span class="line">7         else</span><br><span class="line">8                 echo &quot; $a 不等于 $b&quot;</span><br><span class="line">9 fi</span><br><span class="line">                </span><br></pre></td></tr></table></figure><p><strong>原因：</strong></p><p>“$a”之前和’$b’之后都要有空格</p><h3 id="3-sh执行报错-syntax-error-operand-expected-error-token-is-“-lt-x3D-5-“"><a href="#3-sh执行报错-syntax-error-operand-expected-error-token-is-“-lt-x3D-5-“" class="headerlink" title="3.sh执行报错 syntax error: operand expected (error token is “&lt;&#x3D;5 “)"></a>3.sh执行报错 syntax error: operand expected (error token is “&lt;&#x3D;5 “)</h3><p><strong>脚本如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 1 #!/bin/bash</span><br><span class="line"> 2 # while循环练习</span><br><span class="line"> 3 </span><br><span class="line"> 4 </span><br><span class="line"> 5 #1.基本的while循环语句</span><br><span class="line"> 6 </span><br><span class="line"> 7 </span><br><span class="line"> 8 while (( $int&lt;=5 ))</span><br><span class="line"> 9 do</span><br><span class="line">10         echo $int</span><br><span class="line">11         let &quot;int++&quot;</span><br><span class="line">12 done</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>错误日志：</strong></p><p>.&#x2F;learn_while.sh: line 8: ((: &lt;&#x3D;5 : syntax error: operand expected (error token is “&lt;&#x3D;5 “)</p><p><strong>原因：</strong></p><p>$int 变量未声明</p><h3 id="4-执行的时候报错：syntax-error-unexpected-end-of-file"><a href="#4-执行的时候报错：syntax-error-unexpected-end-of-file" class="headerlink" title="4.执行的时候报错：syntax error: unexpected end of file"></a>4.执行的时候报错：syntax error: unexpected end of file</h3><p><strong>脚本如下:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">1 #!/bin/bash</span><br><span class="line"> 2 # shell 函数练习</span><br><span class="line"> 3 hello()&#123;</span><br><span class="line"> 4         echo 这是我的第一个 shell函数!&quot;</span><br><span class="line"> 5 </span><br><span class="line"> 6 </span><br><span class="line"> 7 &#125;</span><br><span class="line"> 8 echo &quot;--------函数开始执行--------&quot;</span><br><span class="line"> 9 </span><br><span class="line">10 hello</span><br><span class="line">11 </span><br><span class="line">12 echo &quot;--------函数执行完毕-------------&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>错误日志:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@qianshan shell]# ./learn_func.sh</span><br><span class="line">./learn_func.sh: line 12: unexpected EOF while looking for matching `&quot;&#x27;</span><br><span class="line">./learn_func.sh: line 13: syntax error: unexpected end of file</span><br></pre></td></tr></table></figure><p><strong>原因：</strong></p><p>文件格式fileformat是unix，但是line4存在语法错误，调用echo时，字符串开头忘记使用引号包裹</p><p><strong>相关文章：</strong></p><p>发生syntax error: unexpected end of file 这种报错有两种原因：</p><p>第一种：</p><p>如果你是用 windows 系统编写的脚本，那么就有可能是 fileformat 类型不同！可能是 fileformat&#x3D;dos ，那么你需要把格式修改为unix，方法是直接输入 :set ff&#x3D;unix，输入完成后回车即可看到：<br>fileformat&#x3D;unix</p><p>第二种：</p><p>如果你是用 Linux 系统编写的 shell 脚本，在 vim 的命令模式下，执行 :set ff 就能看到 fileformat 类型是 unix ，那么恭喜你，你的 shell 脚本里存在语法错误，你可以使用二分法逐段检查错误，具体就是注释一部分，留一部分，然后执行 sh -n 脚本名字 来检查错误，知道排查处错误为止！<br>————————————————<br>版权声明：本文为CSDN博主「小白网管之路」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_44297303/article/details/102956879">https://blog.csdn.net/weixin_44297303/article/details/102956879</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> 脚本语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署相关Linux命令</title>
      <link href="/2022/01/11/Linux/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/01/11/Linux/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="部署相关Linux命令"><a href="#部署相关Linux命令" class="headerlink" title="部署相关Linux命令"></a>部署相关Linux命令</h1><h4 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1.关闭防火墙"></a>1.关闭防火墙</h4><p>systemctl  stop firewalld</p><p>systemctl disable  firewalld</p><h4 id="2-修改服务器名称，并在hosts文件中添加其他服务器域名（集群搭建"><a href="#2-修改服务器名称，并在hosts文件中添加其他服务器域名（集群搭建" class="headerlink" title="2.修改服务器名称，并在hosts文件中添加其他服务器域名（集群搭建)"></a>2.修改服务器名称，并在hosts文件中添加其他服务器域名（集群搭建)</h4><p>hostnamectl set-hostname ceshi-1</p><p>vim &#x2F;etc&#x2F;hosts</p><p>添加域名映射 192.168.1.168 ceshi-1</p><h4 id="3-上传文件，解压"><a href="#3-上传文件，解压" class="headerlink" title="3.上传文件，解压"></a>3.上传文件，解压</h4><p>上传文件  rz </p><p>解压tar文件 tar -xzvf jdk-8u191-linux-x64.tar.gz</p><p>删除文件 rm -rf 文件</p><p>创建嵌套目录  mkdir -p  &#x2F;java&#x2F;conf</p><h4 id="4-安装jdk"><a href="#4-安装jdk" class="headerlink" title="4.安装jdk"></a>4.安装jdk</h4><p>1.移动文件 mv jdk-8u191  &#x2F;java</p><p>2.在&#x2F;usr&#x2F;local&#x2F;java&#x2F;bin目录下添加libclib_jiio.so、libopencv_java.so两个文件</p><p>3.查询是否安装jdk，删除自带jdk</p><p>查询 rpm -qa |grep java</p><p>删除 rpm -e –nodeps java-1.8.0-openjdk-headless</p><p>4.在&#x2F;etc&#x2F;profile最末尾处添加jdk环境变量，添加保存后，source &#x2F;etc&#x2F;profile使环境变量</p><p>生效</p><p>vim &#x2F;etc&#x2F;profile</p><p>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java</p><p>export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</p><p>export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</p><p>export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;bin</p><p>source &#x2F;etc&#x2F;profile</p><p>5.java -version 查看是否安装成功及版本</p><h4 id="5挂载镜像，无法使用外网的，所以这时就可以搭建本地yum库，搭建好就可直接使用yum库中的yum源，安装gcc-c-，以防安装软件时，会安装不成功。"><a href="#5挂载镜像，无法使用外网的，所以这时就可以搭建本地yum库，搭建好就可直接使用yum库中的yum源，安装gcc-c-，以防安装软件时，会安装不成功。" class="headerlink" title="5挂载镜像，无法使用外网的，所以这时就可以搭建本地yum库，搭建好就可直接使用yum库中的yum源，安装gcc-c++，以防安装软件时，会安装不成功。"></a>5挂载镜像，无法使用外网的，所以这时就可以搭建本地yum库，搭建好就可直接使用yum库中的yum源，安装gcc-c++，以防安装软件时，会安装不成功。</h4><p>1.上传系统镜像</p><p>rz 或者ftp工具</p><p>2.再media路径下创建CentOS文件夹</p><p>mkdir  CentOS</p><p>3.把系统镜像挂载到&#x2F;media&#x2F;CentOS下</p><p>mount -o是用loop设备， 在 linux挂载本地的（可能是硬盘上的） iso文件时， 使用的。</p><p>-o 就是loop回环设备的意思。</p><p>mount -o loop &#x2F;home&#x2F;CentOS-7-x86_64-Everything-1511.iso &#x2F;media&#x2F;CentOS</p><p><img src="/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4.assets/image-20230224105545493.png" alt="image-20230224105545493"></p><p>4.修改yum配置文件，进入&#x2F;etc&#x2F;yum.repos.d下，并修改以下几个名称</p><p><img src="/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4.assets/image-20230224110021507.png" alt="image-20230224110021507"></p><p>5.修改CentOS-Media.repo，把gpgcheck值修改为0，enabled值修改为1，保存退出。</p><p><img src="/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4.assets/image-20230224110054817.png" alt="image-20230224110054817"></p><p><img src="/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4.assets/image-20230224110057224.png" alt="image-20230224110057224"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">配置yum源要在/etc/yum.repos.d 里面创建相应的文件进行编辑</span><br><span class="line"></span><br><span class="line">进入/etc/yum.repos.d</span><br><span class="line"></span><br><span class="line">]# cd /etc/yum.repos.d</span><br><span class="line"></span><br><span class="line">创建要配置的相应的文件</span><br><span class="line"></span><br><span class="line">]#vim rhcsa.repo</span><br><span class="line"></span><br><span class="line">[BaseOS]</span><br><span class="line"></span><br><span class="line">name=BaseOS          #名字和中括号里面的保持一致</span><br><span class="line"></span><br><span class="line">baseurl=                     #后面跟相应的网址</span><br><span class="line"></span><br><span class="line">gpgcheck=0               #0表示从这个源下载的rpm包不进行验证</span><br><span class="line"></span><br><span class="line">enable=1                    #1表示启用这个源</span><br><span class="line"></span><br><span class="line">清除缓存</span><br><span class="line"></span><br><span class="line">yum clean all </span><br><span class="line"></span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">把服务器的包信息下载到本地电脑缓存起来</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6.清除缓存， 把yum源缓存到本地，加快软件的搜索安装速度</p><p>yum clean all </p><p>yum makecache</p><p>7.安装gcc-c++，输入命令回车即安装中，直到结束，安装结束。</p><p><img src="/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4.assets/image-20230224110420896.png" alt="image-20230224110420896"></p><h2 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h2><p>1、禁用CentOS系统的自动报告BUG服务，防止出现该服务占用大量系统资源的情况。</p><p>输入systemctl stop abrt-ccpp.service命令，关闭abrt-ccpp.service服务</p><p>输入systemctl disable abrt-ccpp.service命令，禁用abrt-ccpp.service服务</p><p><img src="/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4.assets/wps5.jpg" alt="img"> </p><p>2、修改进程打开文件句柄数限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">echo中 &gt; 表示写入文件，并将文件内所有文字替换，也就是说会先清除文件内容再写入。</span><br><span class="line"></span><br><span class="line">而  &gt;&gt; 则是在末行追加一行新的到文件中</span><br><span class="line"></span><br><span class="line">echo &quot;kk&quot; &gt; e.txt</span><br><span class="line"></span><br><span class="line">echo &quot;22&quot; &gt;&gt; e.txt</span><br><span class="line"></span><br><span class="line">则cat e.txt后是</span><br><span class="line"></span><br><span class="line">kk</span><br><span class="line"></span><br><span class="line">22</span><br></pre></td></tr></table></figure><p>输入以下命令，在limits.conf文件中新增配置，修改进程打开文件数上限为65535</p><p><img src="/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4.assets/wps6.jpg" alt="img"> </p><p>输入以下命令，临时修改系统打开文件句柄数量限制(马上生效，重启后失效)</p><p><img src="/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4.assets/wps7.jpg" alt="img"> </p><p>输入以下命令，永久修改系统打开文件句柄数量限制</p><p><img src="/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4.assets/wps8.jpg" alt="img"> </p><p>3、修改TCP监听队列大小?</p><p>当服务端并发处理大量请求时，如果TCP全连接队列过小，就容易发生溢出，后续请求就会被丢弃。TCP全连接队列大小默认值为128，对于有大并发量的服务端需要修改调大一点。</p><p>输入命令echo “net.core.somaxconn &#x3D; 32767” &gt;&gt; &#x2F;etc&#x2F;sysctl.conf，永久修改TCP全连接队列大小</p><p><img src="/%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3Linux%E5%91%BD%E4%BB%A4.assets/wps9.jpg" alt="img"> </p><p>输入命令sysctl -p，使修改生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p详解</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">个人一般sysctl -p 或sysctl -a比较多使用 </span><br><span class="line"></span><br><span class="line">sysctl配置与显示在/proc/sys目录中的内核参数．可以用sysctl来设置或重新设置联网功能，如IP转发、IP碎片去除以及源路由检查等。用户只需要编辑/etc/sysctl.conf文件，即可手工或自动执行由sysctl控制的功能。</span><br><span class="line"></span><br><span class="line">    命令格式：</span><br><span class="line"></span><br><span class="line">    sysctl [-n] [-e] -w variable=value</span><br><span class="line"></span><br><span class="line">    sysctl [-n] [-e] -p &lt;filename&gt; (default /etc/sysctl.conf)</span><br><span class="line"></span><br><span class="line">    sysctl [-n] [-e] -a</span><br><span class="line"></span><br><span class="line">    常用参数的意义：</span><br><span class="line"></span><br><span class="line">    -w   临时改变某个指定参数的值，如</span><br><span class="line"></span><br><span class="line">         sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">    -a   显示所有的系统参数</span><br><span class="line"></span><br><span class="line">    -p   从指定的文件加载系统参数，如不指定即从/etc/sysctl.conf中加载</span><br><span class="line"></span><br><span class="line">    如果仅仅是想临时改变某个系统参数的值，可以用两种方法来实现,例如想启用IP路由转发功能：</span><br><span class="line"></span><br><span class="line">    1) #echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line"></span><br><span class="line">    2) #sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">    以上两种方法都可能立即开启路由功能，但如果系统重启，或执行了</span><br><span class="line"></span><br><span class="line">    # service network restart</span><br><span class="line"></span><br><span class="line"> 命令，所设置的值即会丢失，如果想永久保留配置，可以修改/etc/sysctl.conf文件</span><br><span class="line"></span><br><span class="line"> 将 net.ipv4.ip_forward=0改为net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p>touch mongo.conf       #创建mongo主节点配置文件</p><p> chmod 777 mongo.conf     #给予文件权限</p><p>配置好192.168.253.100这台服务器后，复制mongodb文件夹到另外两台服务器中</p><p>scp -r mongodb&#x2F; 192.168.253.101:&#x2F;data&#x2F;  #赋值文件到其他服务器</p><p>vim &#x2F;etc&#x2F;profile   #配置环境变量</p><p>source  &#x2F;etc&#x2F;profile  #刷新环境变量</p><p>ps -ef| grep mongo  查看进程</p><p>kill  -9 进程号  #杀死进程</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群搭建(Docker)</title>
      <link href="/2022/01/11/Docker/Docker%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4/"/>
      <url>/2022/01/11/Docker/Docker%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker搭建redis集群"><a href="#Docker搭建redis集群" class="headerlink" title="Docker搭建redis集群"></a>Docker搭建redis集群</h1><h2 id="一、docker安装redis"><a href="#一、docker安装redis" class="headerlink" title="一、docker安装redis"></a>一、docker安装redis</h2><p>1、拉取redis镜像文件</p><p>docker pull redis<br>1<br>查看镜像</p><p>docker images<br>1</p><p>2、在linux主机创建等会需要挂载的目录和文件</p><p>创建data目录（存放数据文件，包括用于持久化的dump.rdb）<br>mkdir -p &#x2F;mydata&#x2F;redis&#x2F;data<br>1<br>创建配置文件<br>mkdir -p &#x2F;mydata&#x2F;redis&#x2F;conf<br>touch &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf<br>1<br>2<br>3、创建redis容器并进行端口映射、容器取名和目录文件挂载</p><p>docker run -p 6379:6379 –name redis -v &#x2F;mydata&#x2F;redis&#x2F;data:&#x2F;data <br>-v &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf <br>-d redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf<br>1<br>2<br>3<br>:前面是指linux主机，后面是redis容器<br>–name redis 是给容器取名字<br>最后一行的redis是指镜像名</p><p>4、启动容器并进入客户端</p><p>第一种<br>docker exec -it 容器名或容器id bash<br>redis-cli<br>1<br>2</p><p>第二种，直接启动并进入<br>docker exec -it 容器名或容器id redis-cli<br>1</p><h2 id="二、docker搭建redis集群"><a href="#二、docker搭建redis集群" class="headerlink" title="二、docker搭建redis集群"></a>二、docker搭建redis集群</h2><p>1、在linux主机上创建相应的目录用于挂载</p><p>mkdir -p &#x2F;mydata&#x2F;redis&#x2F;cluster&#x2F;node1&#x2F;data   #集群一<br>mkdir -p &#x2F;mydata&#x2F;redis&#x2F;cluster&#x2F;node2&#x2F;data   #集群二<br>mkdir -p &#x2F;mydata&#x2F;redis&#x2F;cluster&#x2F;node3&#x2F;data   #集群三<br>1<br>2<br>3<br>2、创建集群</p><p>创建集群一</p><p>docker create –name redis-node1 -v &#x2F;mydata&#x2F;redis&#x2F;cluster&#x2F;node1&#x2F;data:&#x2F;data  <br>-p 6380:6379 redis –cluster-enabled yes    <br>–cluster-config-file redis-node1.conf<br>1<br>2<br>3<br>启动集群一</p><p>docker start redis-node1<br>1<br>创建集群二</p><p>docker create –name redis-node2 -v &#x2F;mydata&#x2F;redis&#x2F;cluster&#x2F;node2&#x2F;data:&#x2F;data  <br>-p 6381:6379 redis –cluster-enabled yes    <br>–cluster-config-file redis-node2.conf<br>1<br>2<br>3<br>启动集群二</p><p>docker start redis-node2<br>1<br>创建集群三</p><p>docker create –name redis-node3 -v &#x2F;mydata&#x2F;redis&#x2F;cluster&#x2F;node3&#x2F;data:&#x2F;data  <br>-p 6382:6379 redis –cluster-enabled yes    <br>–cluster-config-file redis-node3.conf<br>1<br>2<br>3<br>启动集群三</p><p>docker start redis-node3<br>1<br>3、查看集群信息</p><p>查看启动后的三个集群容器</p><p>注意三个集群的IP和端口信息<br>1、IP信息</p><p>三个Redis集群在Docker容器中被重新分配了IP信息</p><p>1）先看redis-node1容器被分配的IP地址</p><p>docker inspect redis-node1<br>1</p><p>redis-node1:  172.17.0.6<br>1<br>2）再看redis-node2容器被分配的IP地址</p><p>docker inspect redis-node2<br>1</p><p>redis-node2:  172.17.0.7<br>1<br>3）最后看redis-node3容器被分配的IP地址</p><p>docker inspect redis-node3<br>1</p><p>redis-node3:  172.17.0.8<br>1<br>2、 端口信息<br>在做端口映射时，我们已经指明了端口情况<br>redis-node1对外的端口是6380，但是在自己docker分配IP下的端口还是6379<br>redis-node2对外的端口是6381，但是在自己docker分配IP下的端口还是6379<br>redis-node3对外的端口是6382，但是在自己docker分配IP下的端口还是6379</p><p>4、集群搭建</p><p>执行组建集群命令（请根据自己的ip信息进行拼接）</p><p>redis-cli –cluster create 172.17.0.6:6379  172.17.0.7:6379  172.17.0.8:6379 –cluster-replicas 0<br>1<br>5、测试集群</p><p>启动redis，一定要以redis-cli -c命令启动，-c代表启动集群的意思</p><p>在集群一中set name zhangsan</p><p>在集群二和集群三中get name</p><p>可以看到集群搭建成功</p><p>这种集群有个问题，就是这些ip是在一个docker下的，所以只能在一台服务器才可以成功，另外还有一种集群搭建方式，可见<a href="https://blog.51cto.com/u_11827525/2854701">https://blog.51cto.com/u_11827525/2854701</a></p><p>存在的问题<br>按照如上的步骤，虽然集群搭建成功了，但其实还是有点问题的，由于集群结点中的 ip地址 是docket内部分配的，如：172.17.0.2 等，如果使用 redis集群 的项目跟集群不在一台服务器上，那么项目是没法使用集群的，因为是访问不通的。</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230224143216399.png" alt="image-20230224143216399"></p><p>一种解决方案是让Docker使用 host模式 的网络连接类型，Docker在使用host模式下创建的容器是没有自己独立的网络命名空间的，是跟物理机共享一个网络空间，进而可以共享物理机的所有端口与IP，这样就可以让公共网络直接访问容器了，尽管这种方式有安全隐患，但目前来说还没找到其他可行性模式。</p><h2 id="就存在的问题我们重新采用-host模式，重新创建一下容器："><a href="#就存在的问题我们重新采用-host模式，重新创建一下容器：" class="headerlink" title="就存在的问题我们重新采用 host模式，重新创建一下容器："></a>就存在的问题我们重新采用 host模式，重新创建一下容器：</h2><p>1、停止已运行的容器</p><p>docker stop redis-node1 redis-node2 redis-node3</p><p>2、删除之前创建的容器</p><p>docker rm redis-node1 redis-node2 redis-node3# 清空上面创建的配置文件rm -rf &#x2F;data&#x2F;redis-data&#x2F;node*</p><p>3、重新基于host模式创建</p><h2 id="docker-create-–name-redis-node1-–net-host-v-x2F-data-x2F-redis-data-x2F-node1-x2F-data-redis-5-0-5-–cluster-enabled-yes-–cluster-config-file-nodes-node-1-conf-–port-6379"><a href="#docker-create-–name-redis-node1-–net-host-v-x2F-data-x2F-redis-data-x2F-node1-x2F-data-redis-5-0-5-–cluster-enabled-yes-–cluster-config-file-nodes-node-1-conf-–port-6379" class="headerlink" title="docker create –name redis-node1 –net host -v &#x2F;data&#x2F;redis-data&#x2F;node1:&#x2F;data redis:5.0.5 –cluster-enabled yes –cluster-config-file nodes-node-1.conf –port 6379"></a>docker create –name redis-node1 –net host -v &#x2F;data&#x2F;redis-data&#x2F;node1:&#x2F;data redis:5.0.5 –cluster-enabled yes –cluster-config-file nodes-node-1.conf –port 6379</h2><h2 id="docker-create-–name-redis-node2-–net-host-v-x2F-data-x2F-redis-data-x2F-node2-x2F-data-redis-5-0-5-–cluster-enabled-yes-–cluster-config-file-nodes-node-2-conf-–port-6380"><a href="#docker-create-–name-redis-node2-–net-host-v-x2F-data-x2F-redis-data-x2F-node2-x2F-data-redis-5-0-5-–cluster-enabled-yes-–cluster-config-file-nodes-node-2-conf-–port-6380" class="headerlink" title="docker create –name redis-node2 –net host -v &#x2F;data&#x2F;redis-data&#x2F;node2:&#x2F;data redis:5.0.5 –cluster-enabled yes –cluster-config-file nodes-node-2.conf –port 6380"></a>docker create –name redis-node2 –net host -v &#x2F;data&#x2F;redis-data&#x2F;node2:&#x2F;data redis:5.0.5 –cluster-enabled yes –cluster-config-file nodes-node-2.conf –port 6380</h2><h2 id="docker-create-–name-redis-node3-–net-host-v-x2F-data-x2F-redis-data-x2F-node3-x2F-data-redis-5-0-5-–cluster-enabled-yes-–cluster-config-file-nodes-node-3-conf-–port-6381"><a href="#docker-create-–name-redis-node3-–net-host-v-x2F-data-x2F-redis-data-x2F-node3-x2F-data-redis-5-0-5-–cluster-enabled-yes-–cluster-config-file-nodes-node-3-conf-–port-6381" class="headerlink" title="docker create –name redis-node3 –net host -v &#x2F;data&#x2F;redis-data&#x2F;node3:&#x2F;data redis:5.0.5 –cluster-enabled yes –cluster-config-file nodes-node-3.conf –port 6381"></a>docker create –name redis-node3 –net host -v &#x2F;data&#x2F;redis-data&#x2F;node3:&#x2F;data redis:5.0.5 –cluster-enabled yes –cluster-config-file nodes-node-3.conf –port 6381</h2><p>©著作权归作者所有：来自51CTO博客作者niceyoo的原创作品，请联系作者获取转载授权，否则将追究法律责任<br>基于Docker的Redis集群搭建<br><a href="https://blog.51cto.com/u_11827525/2854701">https://blog.51cto.com/u_11827525/2854701</a></p><h1 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h1><p>docker start redis-node1 redis-node2 redis-node3</p><h1 id="进入某一个容器"><a href="#进入某一个容器" class="headerlink" title="进入某一个容器"></a>进入某一个容器</h1><p>docker exec -it redis-node1 &#x2F;bin&#x2F;bash</p><h1 id="组建集群-10-211-55-4为当前物理机的ip地址"><a href="#组建集群-10-211-55-4为当前物理机的ip地址" class="headerlink" title="组建集群,10.211.55.4为当前物理机的ip地址"></a>组建集群,10.211.55.4为当前物理机的ip地址</h1><h2 id="redis-cli-–cluster-create-10-211-55-4-6379-10-211-55-4-6380-10-211-55-4-6381-–cluster-replicas-0"><a href="#redis-cli-–cluster-create-10-211-55-4-6379-10-211-55-4-6380-10-211-55-4-6381-–cluster-replicas-0" class="headerlink" title="redis-cli –cluster create 10.211.55.4:6379  10.211.55.4:6380  10.211.55.4:6381 –cluster-replicas 0"></a>redis-cli –cluster create 10.211.55.4:6379  10.211.55.4:6380  10.211.55.4:6381 –cluster-replicas 0</h2><h2 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-踩坑-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-踩坑-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;踩坑&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;踩坑&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><h3 id="docker-redis启动失败"><a href="#docker-redis启动失败" class="headerlink" title="docker redis启动失败"></a>docker redis启动失败</h3><p>docker logs redis-node1  查看启动失败日志</p><h3 id="redis集群部署一直卡在Waiting-for-the-cluster-to-join解决"><a href="#redis集群部署一直卡在Waiting-for-the-cluster-to-join解决" class="headerlink" title="redis集群部署一直卡在Waiting for the cluster to join解决"></a>redis集群部署一直卡在Waiting for the cluster to join解决</h3><p>配置Redis集群的时候在最后create cluster时发现一直卡在Waiting for the cluster to join，但是我建立集群的时候已经将每个服务器对应的redis占用的端口在防火墙中开放出去了，不应该有这样的问题才对。</p><p>趁点还没有打满屏幕赶紧查看了一下官方文档，文档说除了redis占用的端口（默认为6379）之外，还会占用部署的端口+10000的端口作为集群总线端口，需要将这个端口也在防火墙中开放出去</p><p>tcp 0 0 211.87.232.197:6379 0.0.0.0:* LISTEN 25177&#x2F;.&#x2F;redis-serve<br>tcp 0 0 127.0.0.1:6379 0.0.0.0:* LISTEN 25177&#x2F;.&#x2F;redis-serve<br>tcp 0 0 211.87.232.197:16379 0.0.0.0:* LISTEN 25177&#x2F;.&#x2F;redis-serve<br>tcp 0 0 127.0.0.1:16379 0.0.0.0:* LISTEN 25177&#x2F;.&#x2F;redis-serve</p><p>开放出去后在进行部署，问题解决<br>————————————————<br>版权声明：本文为CSDN博主「冰弦qwq」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/Azisagawa/article/details/124128047">https://blog.csdn.net/Azisagawa/article/details/124128047</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>redis操作key时出现以下错误</p><blockquote><p>(error) MOVED 5798 127.0.0.1:7001</p></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>这种情况一般是因为启动redis-cli时没有设置集群模式所导致。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>启动时使用-c参数来启动集群模式，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -c -p 7000</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>127.0.0.1:7000&gt; get name<br>-&gt; Redirected to slot [5798] located at 127.0.0.1:7001<br>(nil)</p><p>127.0.0.1:7001&gt; set name cf<br>OK</p><p>127.0.0.1:7000&gt; get name<br>-&gt; Redirected to slot [5798] located at 127.0.0.1:7001<br>“cf”</p>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Docker </tag>
            
            <tag> 集群 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令(一)</title>
      <link href="/2021/12/11/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%B8%80)/"/>
      <url>/2021/12/11/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux常用命令-一"><a href="#Linux常用命令-一" class="headerlink" title="Linux常用命令(一)"></a>Linux常用命令(一)</h2><h3 id="1-查看端口是否被占用"><a href="#1-查看端口是否被占用" class="headerlink" title="1.查看端口是否被占用"></a>1.查看端口是否被占用</h3><p>lsof -i:端口号</p><p>eg：lsof -i:6379</p><h3 id="2-查看服务是否启动"><a href="#2-查看服务是否启动" class="headerlink" title="2.查看服务是否启动"></a>2.查看服务是否启动</h3><p>ps -ef|grep redis|grep -v grep</p><h3 id="3-列出符合表达式的文件"><a href="#3-列出符合表达式的文件" class="headerlink" title="3.列出符合表达式的文件"></a>3.列出符合表达式的文件</h3><p>ls -l &#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-*</p><h3 id="4-删除符合表达式的文件"><a href="#4-删除符合表达式的文件" class="headerlink" title="4.删除符合表达式的文件"></a>4.删除符合表达式的文件</h3><p>rm -rf &#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-*</p><h3 id="5-vim中查找"><a href="#5-vim中查找" class="headerlink" title="5.vim中查找"></a>5.vim中查找</h3><p>按<code>/</code>进入搜索命令模式(search command mode)</p><p>您可以按<code>n</code>查找下一个，或按<code>N</code>查找上一个。</p><p>如果要不区分大小写搜索，可以使用<code>\c</code> </p><p>eg： &#x2F;<a href="http://www.02405.com/c">www.02405.com\c</a></p><h3 id="6-vim中替换"><a href="#6-vim中替换" class="headerlink" title="6.vim中替换"></a>6.vim中替换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:&#123;替换范围&#125;s/&#123;要进行替换的文本&#125;/&#123;要替换成的文本&#125;/&#123;替换标签&#125;</span><br></pre></td></tr></table></figure><p>比如替换范围中的<code>%</code>表示批量替换。替换标签中的<code>g</code>表示全局替换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/foo/bar/g</span><br></pre></td></tr></table></figure><p>上面的命令将把文件中的所有<code>foo</code>替换成<code>bar</code>。</p><p>如果要替换一系列行，请执行以下操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:3,14s/foo/bar/g</span><br></pre></td></tr></table></figure><p>上面的命令将把文件中第 3 行到第 14 行中的所有<code>foo</code>替换<code>bar</code>，包括第 3 和第 14 行。</p><p>如果你想更谨慎的替换，那么可以使用确认替换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/foo/bar/gc</span><br></pre></td></tr></table></figure><p>上面的命令将在执行替换操作时进行确认提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace with bar (y/n/a/q/l/^E/^Y)?</span><br></pre></td></tr></table></figure><p>按<code>y</code>替换、<code>n</code>不替换、<code>a</code>全部替换、<code>q</code>退出搜索模式、<code>l</code>替换当前位置退出。<code>^E</code>和<code>^Y</code>是光标移动快捷方式。</p><p>如果要替换特殊字符，请执行以下操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/,/\r/g</span><br></pre></td></tr></table></figure><p>在上面的命令中，我们用<code>\r</code>全局替换逗号<code>,</code>，<code>\r</code>意思表示回车换行。</p><p>如果要将 DOS 风格的<code>\r\n</code>替换为 Unix 风格的<code>\n</code>，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set fileformat=unix</span><br><span class="line">:w</span><br></pre></td></tr></table></figure><p>以上命令会将<code>\r\n</code>全部替换为<code>\n</code>。</p><h4 id="vim中特殊字符的替换方法"><a href="#vim中特殊字符的替换方法" class="headerlink" title="vim中特殊字符的替换方法"></a>vim中特殊字符的替换方法</h4><p>如果要将<code>http://www.02405.com</code>全部替换成<code>https://www.02405.com</code>，因为内容中的<code>/</code>和搜索命令中的<code>/</code>冲突，我们可以用特殊格式搜索替换：</p><p>在 vim 命令模式下，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%s,http://www.02405.com,https://www.02405.com,g</span><br></pre></td></tr></table></figure><p>您可以看到我们在搜索和替换命令中使用逗号作为分隔符以避免冲突。</p><h3 id="7-将时间戳显示为时间"><a href="#7-将时间戳显示为时间" class="headerlink" title="7.将时间戳显示为时间"></a>7.将时间戳显示为时间</h3><p>date -d @时间戳</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis命令</title>
      <link href="/2021/12/11/Redis/redis%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/12/11/Redis/redis%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h2><h1 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h1><p><img src="https://cdn.jsdelivr.net/gh/yinzhenCoder/pic-bed@main/img/image-20230309152225139.png" alt="image-20230309152225139"></p><h3 id="1-启动"><a href="#1-启动" class="headerlink" title="1.启动"></a>1.启动</h3><p>redis-server  (配置文件目录&#x2F;redis.conf)</p><p>eg: redis-server  &#x2F;myredis&#x2F;redis7.conf</p><h3 id="2-关闭"><a href="#2-关闭" class="headerlink" title="2.关闭"></a>2.关闭</h3><p>2.1单实例</p><p>a.进入实例后shutdown</p><p>b. redis-cli -a (password) shutdown</p><p>2.2多实例,指定端口关闭</p><p>redis-cli -p (port) shutdown</p><h3 id="3-卸载"><a href="#3-卸载" class="headerlink" title="3.卸载"></a>3.卸载</h3><p>列出该目录下所有redis相关组件</p><p>ls -l &#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-* </p><p>删除redis全部组件</p><p>rm -rf &#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-*</p><h3 id="4-中文乱码"><a href="#4-中文乱码" class="headerlink" title="4.中文乱码"></a>4.中文乱码</h3><p>redis-cli -a 111111 –raw</p><h3 id="5-获取设置配置值config-get-x2F-set"><a href="#5-获取设置配置值config-get-x2F-set" class="headerlink" title="5.获取设置配置值config  get&#x2F;set"></a>5.获取设置配置值config  get&#x2F;set</h3><p>config get parameter </p><h1 id="二、实战"><a href="#二、实战" class="headerlink" title="二、实战"></a>二、实战</h1><h2 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1.基本命令"></a>1.基本命令</h2><p>1.keys *  查看所有key</p><p>2.exists [key1 key2 ] 判断某个或某些key是否存在</p><p>3.type key 查看指定的key是什么类型</p><p>4.del key 删除指定的key数据 （原子的）</p><p>5.unlink key 非阻塞式删除，仅仅将keys从KeySpace元数据中删除，真正的删除会在后续异步操作完成</p><p>6.ttl key 查看还有多少秒过期，-1永不过期，-2已经过期</p><p>7.expire key [秒钟] 设置指定key的过期时间</p><p>8.select dbindex 切换数据库[0-15],默认为0</p><p>9.move key dbindex 将当前数据库的key移动到指定DB数据库中</p><p>10.dbsize 查看当前DB库的key的数量</p><p>11.flushDB 清空当前库</p><p>12.flushAll 通杀全部库</p><h2 id="2-数据类型命令及应用"><a href="#2-数据类型命令及应用" class="headerlink" title="2.数据类型命令及应用"></a>2.数据类型命令及应用</h2><h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><h4 id="1-redis命令不区分大小写，key区分大小写"><a href="#1-redis命令不区分大小写，key区分大小写" class="headerlink" title="1.redis命令不区分大小写，key区分大小写"></a>1.redis命令不区分大小写，key区分大小写</h4><h4 id="2-help-数据类型，帮助命令，可以获取redis提供对应数据类型的命令提示"><a href="#2-help-数据类型，帮助命令，可以获取redis提供对应数据类型的命令提示" class="headerlink" title="2.help @数据类型，帮助命令，可以获取redis提供对应数据类型的命令提示"></a>2.help @数据类型，帮助命令，可以获取redis提供对应数据类型的命令提示</h4><h3 id="1-字符串String类型"><a href="#1-字符串String类型" class="headerlink" title="1.字符串String类型"></a>1.字符串String类型</h3><h4 id="1-set"><a href="#1-set" class="headerlink" title="1.set"></a>1.set</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET key value [NX | XX] [GET] [EX seconds | PX milliseconds |</span><br><span class="line">  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]</span><br></pre></td></tr></table></figure><h5 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h5><p>The <code>SET</code> command supports a set of options that modify its behavior:</p><ul><li><code>EX</code> <em>seconds</em> – Set the specified expire time, in seconds.</li><li><code>PX</code> <em>milliseconds</em> – Set the specified expire time, in milliseconds.</li><li><code>EXAT</code> <em>timestamp-seconds</em> – Set the specified Unix time at which the key will expire, in seconds.（Unix时间戳秒）</li><li><code>PXAT</code> <em>timestamp-milliseconds</em> – Set the specified Unix time at which the key will expire, in milliseconds.（Unix时间戳毫秒）</li><li><code>NX</code> – Only set the key if it does not already exist.</li><li><code>XX</code> – Only set the key if it already exist.</li><li><code>KEEPTTL</code> – Retain the time to live associated with the key.（修改key的值时，保留该key的过期时间）</li><li><code>GET</code> – Return the old string stored at key, or nil if key did not exist. An error is returned and <code>SET</code> aborted if the value stored at key is not a string.（在修改值之前返回老值，或空值）</li></ul><p>Note: Since the <code>SET</code> command options can replace <a href="https://redis.io/commands/setnx"><code>SETNX</code></a>, <a href="https://redis.io/commands/setex"><code>SETEX</code></a>, <a href="https://redis.io/commands/psetex"><code>PSETEX</code></a>, <a href="https://redis.io/commands/getset"><code>GETSET</code></a>, it is possible that in future versions of Redis these commands will be deprecated and finally removed.</p><p><img src="C:\Users\acer\AppData\Roaming\Typora\typora-user-images\image-20230306221340250.png" alt="image-20230306221340250"></p><h4 id="2-同时设置或获取多个键值"><a href="#2-同时设置或获取多个键值" class="headerlink" title="2.同时设置或获取多个键值"></a>2.同时设置或获取多个键值</h4><p>mset、mget</p><p>msetNx（作为一组，类似事物，只要有一个失败就全部失败）</p><h4 id="3-获取指定区间范围内的值"><a href="#3-获取指定区间范围内的值" class="headerlink" title="3.获取指定区间范围内的值"></a>3.获取指定区间范围内的值</h4><p>（0，-1）全长</p><p>getrange（类似java中substring）</p><p>setrange （替换指定索引内容）</p><h4 id="4-数值增减"><a href="#4-数值增减" class="headerlink" title="4.数值增减"></a>4.数值增减</h4><p>注意：必须是数字</p><p>incr、decr  （i++,i–）</p><p>incrby key offset  使用指定步长进行+</p><p>decrby key offset 使用指定步长进行-</p><h4 id="5-字符串长度和内容增加"><a href="#5-字符串长度和内容增加" class="headerlink" title="5.字符串长度和内容增加"></a>5.字符串长度和内容增加</h4><p>strlen</p><p>append key value</p><h4 id="6-分布式锁"><a href="#6-分布式锁" class="headerlink" title="6.分布式锁"></a>6.分布式锁</h4><p>setnx 如果不存在 则添加</p><p>setex key  过期时间 value    （将 set 跟expire 两个命令合成一个原子操作）</p><h4 id="7-getset"><a href="#7-getset" class="headerlink" title="7.getset"></a>7.getset</h4><p>getset key value 先get再set ，先返回旧值，再设新值，跟set key value get 是一个效果两种写法</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><h5 id="1-点一下加一次，抖音直播点赞"><a href="#1-点一下加一次，抖音直播点赞" class="headerlink" title="1.点一下加一次，抖音直播点赞"></a>1.点一下加一次，抖音直播点赞</h5><h5 id="2-微信朋友圈文章阅读量"><a href="#2-微信朋友圈文章阅读量" class="headerlink" title="2.微信朋友圈文章阅读量"></a>2.微信朋友圈文章阅读量</h5><h3 id="2-列表List类型"><a href="#2-列表List类型" class="headerlink" title="2.列表List类型"></a>2.列表List类型</h3><p>数据结构是一个双端列表，常用来实现栈、队列，从两端进行操作时间复杂度O（1） 使用索引操作中间节点的效率较低</p><h4 id="1-插入数据（左右）及（从左开始）遍历"><a href="#1-插入数据（左右）及（从左开始）遍历" class="headerlink" title="1.插入数据（左右）及（从左开始）遍历"></a>1.插入数据（左右）及（从左开始）遍历</h4><h4 id="lpush、rpush"><a href="#lpush、rpush" class="headerlink" title="lpush、rpush"></a>lpush、rpush</h4><h4 id="lrange-eg-lrange-list1-0-1-从头到尾遍历"><a href="#lrange-eg-lrange-list1-0-1-从头到尾遍历" class="headerlink" title="lrange     eg:lrange list1 0 -1 从头到尾遍历"></a>lrange     eg:lrange list1 0 -1 从头到尾遍历</h4><h4 id="2-弹出元素"><a href="#2-弹出元素" class="headerlink" title="2.弹出元素"></a>2.弹出元素</h4><p>lpop（左头）、rpop（右尾）</p><h4 id="3-按照索引下标获取元素-从上到下"><a href="#3-按照索引下标获取元素-从上到下" class="headerlink" title="3.按照索引下标获取元素(从上到下)"></a>3.按照索引下标获取元素(从上到下)</h4><p>lindex</p><h4 id="4-获取列表中元素的个数"><a href="#4-获取列表中元素的个数" class="headerlink" title="4.获取列表中元素的个数"></a>4.获取列表中元素的个数</h4><p>llen</p><h4 id="5-删除N个值等于v1的元素"><a href="#5-删除N个值等于v1的元素" class="headerlink" title="5.删除N个值等于v1的元素"></a>5.删除N个值等于v1的元素</h4><p>lrem key N v1 </p><p><img src="C:\Users\acer\AppData\Roaming\Typora\typora-user-images\image-20230306230805330.png" alt="image-20230306230805330"></p><h4 id="6-截取指定范围的值后再赋值给key"><a href="#6-截取指定范围的值后再赋值给key" class="headerlink" title="6.截取指定范围的值后再赋值给key"></a>6.截取指定范围的值后再赋值给key</h4><p>ltrim key start end</p><p><img src="C:\Users\acer\AppData\Roaming\Typora\typora-user-images\image-20230306230832912.png" alt="image-20230306230832912"></p><h4 id="7-从源列表弹出一个元素放到-目的地列表"><a href="#7-从源列表弹出一个元素放到-目的地列表" class="headerlink" title="7.从源列表弹出一个元素放到 目的地列表"></a>7.从源列表弹出一个元素放到 目的地列表</h4><p>rpoplpush resource destination </p><p><img src="C:\Users\acer\AppData\Roaming\Typora\typora-user-images\image-20230306231337903.png" alt="image-20230306231337903"></p><h4 id="8-通过索引设置列表元素值"><a href="#8-通过索引设置列表元素值" class="headerlink" title="8.通过索引设置列表元素值"></a>8.通过索引设置列表元素值</h4><p>lset key index element</p><h4 id="9-插入一个元素在已有元素的前或后（链表）"><a href="#9-插入一个元素在已有元素的前或后（链表）" class="headerlink" title="9.插入一个元素在已有元素的前或后（链表）"></a>9.插入一个元素在已有元素的前或后（链表）</h4><p>linsert key before&#x2F;after piovt element</p><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><p>微信公众号订阅的消息</p><p><img src="C:\Users\acer\AppData\Roaming\Typora\typora-user-images\image-20230306232120298.png" alt="image-20230306232120298"></p><h3 id="3-散列表hash数据类型"><a href="#3-散列表hash数据类型" class="headerlink" title="3.散列表hash数据类型"></a>3.散列表hash数据类型</h3><p>k-v键值对模式不变，v的位置放置一个map。类似 map&lt;String,Map&lt;String,Object&gt;&gt;</p><h4 id="1-设置值获取值"><a href="#1-设置值获取值" class="headerlink" title="1.设置值获取值"></a>1.设置值获取值</h4><p>hset&#x2F;hget  设置获取单个或多个 （返回成功数量）</p><p>hmget  获取多个field值</p><p>hmset  设置多个field值 (成功返回ok，而不是field的数量)</p><p>hgetall hdel</p><h4 id="2-获取key内部field的数量"><a href="#2-获取key内部field的数量" class="headerlink" title="2.获取key内部field的数量"></a>2.获取key内部field的数量</h4><p>hlen</p><h4 id="3-查看key中是否存在某个field字段"><a href="#3-查看key中是否存在某个field字段" class="headerlink" title="3.查看key中是否存在某个field字段"></a>3.查看key中是否存在某个field字段</h4><p>hexists key field</p><h4 id="4-列出所有key、所有value"><a href="#4-列出所有key、所有value" class="headerlink" title="4.列出所有key、所有value"></a>4.列出所有key、所有value</h4><p>hkeys </p><p>hvals</p><h4 id="5-对于field的value为数据可以进行加减"><a href="#5-对于field的value为数据可以进行加减" class="headerlink" title="5.对于field的value为数据可以进行加减"></a>5.对于field的value为数据可以进行加减</h4><p>hincrby  user:001 age  1 意思为：对user:001这个key的age的feild字段的值进行增加，加1</p><p>hincrbyfloat user:001 score  0.5（意思同上，对浮点类型的数进行增加）</p><h4 id="6-对key的field字段进行赋值，不存在赋值成功，存在失败"><a href="#6-对key的field字段进行赋值，不存在赋值成功，存在失败" class="headerlink" title="6.对key的field字段进行赋值，不存在赋值成功，存在失败"></a>6.对key的field字段进行赋值，不存在赋值成功，存在失败</h4><p>hsetnx user:001 email <a href="mailto:&#121;&#x7a;&#x31;&#x38;&#55;&#51;&#53;&#x31;&#52;&#57;&#53;&#52;&#49;&#64;&#x31;&#54;&#51;&#46;&#99;&#111;&#109;">&#121;&#x7a;&#x31;&#x38;&#55;&#51;&#53;&#x31;&#52;&#57;&#53;&#52;&#49;&#64;&#x31;&#54;&#51;&#46;&#99;&#111;&#109;</a></p><p><img src="/redis%E5%91%BD%E4%BB%A4.assets/image-20230307102652513.png" alt="image-20230307102652513"></p><h4 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h4><p>JD早期购物车，目前不用了，中小厂使用</p><p><img src="/redis%E5%91%BD%E4%BB%A4.assets/image-20230307103150631.png" alt="image-20230307103150631"></p><h3 id="4-集合Set数据类型"><a href="#4-集合Set数据类型" class="headerlink" title="4.集合Set数据类型"></a>4.集合Set数据类型</h3><p>类似于hashset 无序不可重复</p><h4 id="1-添加单个或多个元素"><a href="#1-添加单个或多个元素" class="headerlink" title="1.添加单个或多个元素"></a>1.添加单个或多个元素</h4><p>sadd key member</p><h4 id="2-遍历set集合"><a href="#2-遍历set集合" class="headerlink" title="2.遍历set集合"></a>2.遍历set集合</h4><p>smembers key</p><h4 id="3-判断key集合中某个元素是否存在"><a href="#3-判断key集合中某个元素是否存在" class="headerlink" title="3.判断key集合中某个元素是否存在"></a>3.判断key集合中某个元素是否存在</h4><p>sismember key member</p><h4 id="4-删除集合中的单个或多个元素"><a href="#4-删除集合中的单个或多个元素" class="headerlink" title="4.删除集合中的单个或多个元素"></a>4.删除集合中的单个或多个元素</h4><p>srem key member</p><h4 id="5-统计集合中元素个数"><a href="#5-统计集合中元素个数" class="headerlink" title="5.统计集合中元素个数"></a>5.统计集合中元素个数</h4><p>scard key</p><h4 id="6-从集合中随机取出指定个数的元素进行展示（不删除元素）"><a href="#6-从集合中随机取出指定个数的元素进行展示（不删除元素）" class="headerlink" title="6.从集合中随机取出指定个数的元素进行展示（不删除元素）"></a>6.从集合中随机取出指定个数的元素进行展示（不删除元素）</h4><p>srandmember key count</p><h4 id="7-从集合中弹出指定个数的元素（删除元素）"><a href="#7-从集合中弹出指定个数的元素（删除元素）" class="headerlink" title="7.从集合中弹出指定个数的元素（删除元素）"></a>7.从集合中弹出指定个数的元素（删除元素）</h4><p>spop key count</p><h4 id="8-从源集合往目标集合迁移某个元素"><a href="#8-从源集合往目标集合迁移某个元素" class="headerlink" title="8.从源集合往目标集合迁移某个元素"></a>8.从源集合往目标集合迁移某个元素</h4><p>smove source destination member</p><h4 id="amp-amp-集合运算"><a href="#amp-amp-集合运算" class="headerlink" title="&amp;&amp;集合运算"></a>&amp;&amp;集合运算</h4><p>set1   abc12  set2 123ax</p><p>1.集合的差集运算</p><p>SDIff set1 set2 ,求在set1中存在，set2中不存在的       结果： bc</p><p>2.集合的并集运算</p><p>sunion set1 set2    合并两个集合   结果 abc123x</p><p>3.集合的交集运算</p><p>a.sinter set1 set2  (返回具体元素)求在set1 跟set2 中都存在的</p><p>b.sintercard numbers key limit （不返回结果集，返回结果的基数，返回所有给定集合的交集产生的集合的基数）</p><p>参数解析：</p><p>numbers: 集合个数</p><p>limit:如果数量太多，最大为多少   </p><h4 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h4><p>1.微信小程序抽奖</p><p><img src="/redis%E5%91%BD%E4%BB%A4.assets/image-20230307113209442.png" alt="image-20230307113209442"></p><p>2.微信、抖音、QQ  推荐可能认识的人（我的好友集合跟我好友的好友集合，差集运算）sdiff</p><p>3.朋友圈点赞查看同赞好友（某条朋友圈点赞集合跟我的好友集合求交集）sinter</p><p><img src="/redis%E5%91%BD%E4%BB%A4.assets/image-20230307113657341.png" alt="image-20230307113657341"></p><h3 id="5-有序集合ZSet（Sorted-SET）数据类型"><a href="#5-有序集合ZSet（Sorted-SET）数据类型" class="headerlink" title="5.有序集合ZSet（Sorted SET）数据类型"></a>5.有序集合ZSet（Sorted SET）数据类型</h3><h4 id="1-向有序集合中添加一个元素及元素的分数"><a href="#1-向有序集合中添加一个元素及元素的分数" class="headerlink" title="1.向有序集合中添加一个元素及元素的分数"></a>1.向有序集合中添加一个元素及元素的分数</h4><p>zadd key score member</p><h4 id="2-按照元素分数从小到大的顺序，返回索引从start到stop之间的所有元素-可选withscores-将分数也返回"><a href="#2-按照元素分数从小到大的顺序，返回索引从start到stop之间的所有元素-可选withscores-将分数也返回" class="headerlink" title="2.按照元素分数从小到大的顺序，返回索引从start到stop之间的所有元素 可选withscores 将分数也返回"></a>2.按照元素分数从小到大的顺序，返回索引从start到stop之间的所有元素 可选withscores 将分数也返回</h4><p>zrange key start stop [withscores]</p><h4 id="3-反转遍历"><a href="#3-反转遍历" class="headerlink" title="3.反转遍历"></a>3.反转遍历</h4><p>zrevrange</p><h4 id="4-获取指定分数范围内的元素"><a href="#4-获取指定分数范围内的元素" class="headerlink" title="4.获取指定分数范围内的元素"></a>4.获取指定分数范围内的元素</h4><p>zrangebyscore key start stop [withscore] [limit]</p><p>参数说明：</p><h4 id="a-withscores-是是否显示score"><a href="#a-withscores-是是否显示score" class="headerlink" title="a. withscores 是是否显示score"></a>a. withscores 是是否显示score</h4><p>b. ( 是不包含 </p><p>c. limit 作用是返回限制，类似mysql分页</p><h4 id="5-获取元素的分数"><a href="#5-获取元素的分数" class="headerlink" title="5.获取元素的分数"></a>5.获取元素的分数</h4><p>zcore key member</p><h4 id="6-删除元素"><a href="#6-删除元素" class="headerlink" title="6.删除元素"></a>6.删除元素</h4><p>zrem key member</p><h4 id="7-获取集合元素数量"><a href="#7-获取集合元素数量" class="headerlink" title="7.获取集合元素数量"></a>7.获取集合元素数量</h4><p>zcard zset</p><h4 id="8-增加集合中元素的分数"><a href="#8-增加集合中元素的分数" class="headerlink" title="8.增加集合中元素的分数"></a>8.增加集合中元素的分数</h4><p>zincrby key increment member</p><h4 id="9-获取某分数范围内元素的数量"><a href="#9-获取某分数范围内元素的数量" class="headerlink" title="9.获取某分数范围内元素的数量"></a>9.获取某分数范围内元素的数量</h4><p>zcount key min max</p><h4 id="10-从键名列表中的第一个非空排序集中弹出一个或多个元素，他们是成员分数对-弹出即删除"><a href="#10-从键名列表中的第一个非空排序集中弹出一个或多个元素，他们是成员分数对-弹出即删除" class="headerlink" title="10.从键名列表中的第一个非空排序集中弹出一个或多个元素，他们是成员分数对(弹出即删除)"></a>10.从键名列表中的第一个非空排序集中弹出一个或多个元素，他们是成员分数对(弹出即删除)</h4><p>zmpop numbersize key max|min count count</p><p>eg:zmpop 1 zset1 min count 1</p><h4 id="11-获取成员下标值"><a href="#11-获取成员下标值" class="headerlink" title="11.获取成员下标值"></a>11.获取成员下标值</h4><p>zrank key member（正序）</p><p>zrevrank key member（逆序）</p><h4 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>排行榜：根据商品销售对商品进行排序显示</li></ol><p><img src="/redis%E5%91%BD%E4%BB%A4.assets/image-20230307133654733.png" alt="image-20230307133654733"></p><h3 id="6-位图bitmap数据类型"><a href="#6-位图bitmap数据类型" class="headerlink" title="6.位图bitmap数据类型"></a>6.位图bitmap数据类型</h3><p>由0和1状态表现的二进制位的bit数组</p><p>说明：</p><p>一个字节（1 byte） &#x3D; 8位</p><p>用String类型作为底层数据结构实现的一种统计二值状态的数据类型，位图的本质是数组，它是基于String数据类型的按位的操作。</p><p>该数组由多个二进制位组成，每个二进制位都对应一个偏移量（我们称之为一个索引）</p><p>需求：</p><p>1.用户是否登陆过 Y，N 比如京东每日签到送京豆</p><p>2.钉钉打卡</p><p>3.广告统计是否被点击播放过</p><p>如果用常规数据结构，MySQL进行存储需要存储多条数据，或者单条数据多个列，需要进行多次update，消耗太大</p><h4 id="1-setbit-设置指定key指定偏移位的值"><a href="#1-setbit-设置指定key指定偏移位的值" class="headerlink" title="1.setbit 设置指定key指定偏移位的值"></a>1.setbit 设置指定key指定偏移位的值</h4><p>setbit key offset value</p><h4 id="2-getbit-获取指定key指定偏移位的值"><a href="#2-getbit-获取指定key指定偏移位的值" class="headerlink" title="2.getbit 获取指定key指定偏移位的值"></a>2.getbit 获取指定key指定偏移位的值</h4><p>getbit key offset </p><h4 id="3-获取字节数（偏移量除以-x2F-8-byte为单位）"><a href="#3-获取字节数（偏移量除以-x2F-8-byte为单位）" class="headerlink" title="3.获取字节数（偏移量除以&#x2F;8 byte为单位）"></a>3.获取字节数（偏移量除以&#x2F;8 byte为单位）</h4><p>strlen key</p><h4 id="4-统计为1的数量"><a href="#4-统计为1的数量" class="headerlink" title="4.统计为1的数量"></a>4.统计为1的数量</h4><p>bitcount key</p><h4 id="5-bitop-对不同的二进制存储数据进行位运算（AND-OR-NOT-XOR）"><a href="#5-bitop-对不同的二进制存储数据进行位运算（AND-OR-NOT-XOR）" class="headerlink" title="5.bitop 对不同的二进制存储数据进行位运算（AND OR NOT XOR）"></a>5.bitop 对不同的二进制存储数据进行位运算（AND OR NOT XOR）</h4><p>bitop operation destkey key [key …]</p><p>eg: bitop and bit3 bit1 bit2</p><p>例：某游戏连续七天发奖品</p><p>使用hash维护0 1 分别映射的useriD,</p><p>再使用位图维护 0 1 对应的是否登录，</p><p>利用bitop来计算连续几天登录，</p><p>再从hash中取出对应的用户</p><h4 id="应用场景-5"><a href="#应用场景-5" class="headerlink" title="应用场景"></a>应用场景</h4><p>1.记录考勤打卡天数</p><p><strong><img src="/redis%E5%91%BD%E4%BB%A4.assets/image-20230307162816239.png" alt="image-20230307162816239"></strong></p><p>利用bitcount user 0 30 计算一个月内签到的次数</p><p>2.既实现统计分析又快又节省内存</p><p>一个用户365天登录数据（365&#x2F;8 &#x3D;46byte）1000w 用户每年的打卡数据占用44M</p><p>一亿级的用户数据（10^8&#x2F;8&#x2F;1024&#x2F;1024)  12M，10天也就120M，内存压力不算太高</p><p>实际使用，设置过期时间，删掉无用的签到记录释放内存压力</p><h3 id="7-基数统计HyperLogLog"><a href="#7-基数统计HyperLogLog" class="headerlink" title="7.基数统计HyperLogLog"></a>7.基数统计HyperLogLog</h3><p>基数统计，网页UV（Unique Visitor）,12KB ,误差0.81，去重脱水后的真实数据</p><p>type hll01 为String，底层为String</p><p>1.添加元素</p><p>pfadd key element [element …]</p><p>2.合并hll</p><p>pfmerge destkey sourcekey [sourcekey …]</p><p>3.计算基数值</p><p>pfcount key [key …]</p><h4 id="应用场景-6"><a href="#应用场景-6" class="headerlink" title="应用场景"></a>应用场景</h4><p>天猫网站首页亿级UV统计Redis实现方案</p><h3 id="8-地理空间GEO数据类型"><a href="#8-地理空间GEO数据类型" class="headerlink" title="8.地理空间GEO数据类型"></a>8.地理空间GEO数据类型</h3><p>附件的小姐姐 高德附件景点 外卖附件商家</p><p>数据类型为zset，是zset的子类</p><h4 id="1-添加经纬度坐标"><a href="#1-添加经纬度坐标" class="headerlink" title="1.添加经纬度坐标"></a>1.添加经纬度坐标</h4><p>geoadd key longitude latitude member[ longitude latitude member … ]</p><h4 id="2-返回经纬度"><a href="#2-返回经纬度" class="headerlink" title="2.返回经纬度"></a>2.返回经纬度</h4><p>geopos key member</p><h4 id="3-返回坐标的geohash表示-（从三维到二维经纬度再到一维geohash，再到base32）"><a href="#3-返回坐标的geohash表示-（从三维到二维经纬度再到一维geohash，再到base32）" class="headerlink" title="3.返回坐标的geohash表示   （从三维到二维经纬度再到一维geohash，再到base32）"></a>3.返回坐标的geohash表示   （从三维到二维经纬度再到一维geohash，再到base32）</h4><p>geohash member</p><h4 id="4-两个给定位置之间的距离"><a href="#4-两个给定位置之间的距离" class="headerlink" title="4.两个给定位置之间的距离"></a>4.两个给定位置之间的距离</h4><p>geodist key member member M|KM|FI|MI</p><h4 id="5-返回当前经纬度给定半径内的地点（查询半径多少的附件XXX）"><a href="#5-返回当前经纬度给定半径内的地点（查询半径多少的附件XXX）" class="headerlink" title="5.返回当前经纬度给定半径内的地点（查询半径多少的附件XXX）"></a>5.返回当前经纬度给定半径内的地点（查询半径多少的附件XXX）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GEORADIUS key longitude latitude radius &lt;M | KM | FT | MI&gt;</span><br><span class="line">  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]</span><br><span class="line">  [STORE key] [STOREDIST key]</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="/redis%E5%91%BD%E4%BB%A4.assets/image-20230307175940566.png" alt="image-20230307175940566"></p><h4 id="6-返回key中member位置给定半径内的地点-代替上面的手输经纬度"><a href="#6-返回key中member位置给定半径内的地点-代替上面的手输经纬度" class="headerlink" title="6.返回key中member位置给定半径内的地点(代替上面的手输经纬度)"></a>6.返回key中member位置给定半径内的地点(代替上面的手输经纬度)</h4><p>georadiusByMember key member radius  &lt;M | KM | FT | MI&gt;  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC] [STORE key] [STOREDIST key]</p><p><img src="/redis%E5%91%BD%E4%BB%A4.assets/image-20230307180724962.png" alt="image-20230307180724962"></p><h3 id="9-流Stream数据类型"><a href="#9-流Stream数据类型" class="headerlink" title="9.流Stream数据类型"></a>9.流Stream数据类型</h3><p>redis 的消息队列，有两种模式，一种点对点(list),一种PUB&#x2F;SUB</p><p>redis版的MQ中间件+阻塞队列</p><p><strong>Stream数据结构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yinzhenCoder/pic-bed@main/img/image-20230308112216369.png" alt="image-20230308112216369"></p><p><img src="https://cdn.jsdelivr.net/gh/yinzhenCoder/pic-bed@main/img/image-20230308112234187.png" alt="image-20230308112234187"></p><p><strong>四个特殊符号</strong></p><ul><li>“+ - ”：最小和最大可能出现的ID</li><li>“ $ “: 表示只消费新的消息，当前流中最大的id，可用于将要到来的消息</li><li>“ &gt; ”: 用于XREADGROUP命令，表示迄今还没有发送给组中使用者的信息，会更新消费者组的最后ID</li><li>“ * “:用于XADD命令中，让系统自动生成id</li></ul><h4 id="1-添加消息到队列末尾"><a href="#1-添加消息到队列末尾" class="headerlink" title="1.添加消息到队列末尾"></a>1.添加消息到队列末尾</h4><p>xadd key * key value [key value]</p><p>返回消息id-索引</p><h4 id="2-返回队列全部消息-最小-最大"><a href="#2-返回队列全部消息-最小-最大" class="headerlink" title="2.返回队列全部消息(- 最小 + 最大)"></a>2.返回队列全部消息(- 最小 + 最大)</h4><p>xrange key - + </p><p>xrerange key + - count 1 </p><h4 id="3-xdel删除消息队列信息根据messageId"><a href="#3-xdel删除消息队列信息根据messageId" class="headerlink" title="3.xdel删除消息队列信息根据messageId"></a>3.xdel删除消息队列信息根据messageId</h4><p>xdel mystream messageId</p><h4 id="4-xlen返回消息队列的长度"><a href="#4-xlen返回消息队列的长度" class="headerlink" title="4.xlen返回消息队列的长度"></a>4.xlen返回消息队列的长度</h4><p>xlen key</p><h4 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h4><h3 id="10-位域BitField数据类型-了解即可"><a href="#10-位域BitField数据类型-了解即可" class="headerlink" title="10.位域BitField数据类型(了解即可)"></a>10.位域BitField数据类型(了解即可)</h3><p>位域修改</p><p>溢出控制</p><p>将一个Redis字符串看作是一个由二进制位组成的数组</p><p>并能对变长位宽和任意没有字节对齐的指定整型位域进行寻址和修改</p><p>hello（ 0110100001100101011011000110110001101111）类似于机器编码的概念</p><h4 id="1-获取String类型的指定位值"><a href="#1-获取String类型的指定位值" class="headerlink" title="1.获取String类型的指定位值"></a>1.获取String类型的指定位值</h4><p>bitfield key get encoding offset </p><p>bitfield key get i8 0 意为:获取指定key上编码类型带符号的8位，偏移量为0的ascii值</p><h4 id="2-修改指定key指定偏移量的指定位值"><a href="#2-修改指定key指定偏移量的指定位值" class="headerlink" title="2.修改指定key指定偏移量的指定位值"></a>2.修改指定key指定偏移量的指定位值</h4><p>bitfield key set i8 0 120 意为:修改指定key上编码类型带符号的8位，偏移量为0的ascii值为120</p><h4 id="3-增加指定偏移量的指定位值"><a href="#3-增加指定偏移量的指定位值" class="headerlink" title="3.增加指定偏移量的指定位值"></a>3.增加指定偏移量的指定位值</h4><p>bitfield key incrby u4 2 1 意为：修改指定key上编码类型无符号的4位，偏移量为2的位值加1</p><h4 id="4-溢出控制，二进制最小-128-最大127-累加超过该值则会触发溢出控制，默认WRAP"><a href="#4-溢出控制，二进制最小-128-最大127-累加超过该值则会触发溢出控制，默认WRAP" class="headerlink" title="4.溢出控制，二进制最小-128 最大127 累加超过该值则会触发溢出控制，默认WRAP"></a>4.溢出控制，二进制最小-128 最大127 累加超过该值则会触发溢出控制，默认WRAP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bitfield test overflow fail set i8 0 129</span><br></pre></td></tr></table></figure><p>WRAP 使用回绕（wrap around）方法,处理有符号整数、无符号整数的溢出</p><p>SAT 饱和计算，溢出最大取最大，溢出最小取最小</p><p>FAIL 拒绝执行溢出的情况，返回nil表示未执行</p><h2 id="3-Redis持久化"><a href="#3-Redis持久化" class="headerlink" title="3.Redis持久化"></a>3.Redis持久化</h2><h3 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1.RDB"></a>1.RDB</h3><p>RDB (Redis DataBase)   ：RDB持久性以指定时间间隔执行数据集的时间点快照 ,RDB文件（dump.rdb），恢复时从硬盘快照文件读回内存，全量快照，一锅端</p><p>配置：</p><p>save （sec） （change） 每多少秒，修改的文件数量，达到条件则SnapShotting</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230309112824816.png"></p><h4 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h4><p>6.0.16版本下</p><p> save 900 1</p><p>save 300 10</p><p>save 60 10000</p><p>6.2及 7版本</p><p>save 3600 1 300 100 60 10000 </p><h4 id="修改配置："><a href="#修改配置：" class="headerlink" title="修改配置："></a>修改配置：</h4><p>1.持久化配置时间  save 5 2 </p><p>2.dump路径 .&#x2F;dir   </p><p>3.dump名称 dbfilename</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>1.执行flushall 或者 flushdb 也会生成dump文件，但是文件是空的因为再做这类提交命令时，为保持数据一致要生成dump文件</p><p>2.执行shutdown命令，模拟宕机时也会生成一个空的dump文件</p><p>3.不可以把备份文件dump.rdb跟生成redis服务器放到同一台机器，必须分开存储，避免生产机物理损坏后备份文件也挂了</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230309165655827.png" alt="image-20230309165655827"></p><h4 id="触发方式"><a href="#触发方式" class="headerlink" title="触发方式"></a>触发方式</h4><p>自动触发走配置</p><p>手动触发 通过命令（生产不用save）</p><ul><li><p>save （阻塞主进程） </p></li><li><p>bgsave（fork后台子进程）</p></li><li><p>lastsave 获取最后一次成功执行快照的时间</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>优点</p><ul><li><p>适合大规模数据恢复</p></li><li><p>按照业务定时备份</p></li><li><p>对数据完整性跟一致性要去不高</p></li><li><p>RDB文件在内存中加载的速度要比AOF快的多</p></li></ul><p>缺点</p><ul><li>快照间数据丢失</li><li>全量同步，数据量大会导致IO严重影响服务器性能</li><li>RDB依赖主进程的fork，可能导致服务器请求瞬间延迟，fork的时候内存中的数据被克隆了一份，大致两倍的膨胀性，需要考虑</li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>AOF (Append Only File)  一行一行</p>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NOSQL </tag>
            
            <tag> 分布式缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORACLE导库</title>
      <link href="/2021/12/11/SQL/ORACLE%E5%AF%BC%E5%BA%93/"/>
      <url>/2021/12/11/SQL/ORACLE%E5%AF%BC%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="ORACLE"><a href="#ORACLE" class="headerlink" title="ORACLE"></a>ORACLE</h1><h2 id="1-清库"><a href="#1-清库" class="headerlink" title="1.清库"></a>1.清库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--1.登录oracle</span></span><br><span class="line">sqlplus <span class="operator">/</span><span class="keyword">as</span> sysdba </span><br><span class="line"></span><br><span class="line"><span class="comment">--2.停止实例</span></span><br><span class="line">shutdown immeditate</span><br><span class="line"></span><br><span class="line"><span class="comment">--3.重启</span></span><br><span class="line">startup</span><br><span class="line"></span><br><span class="line"><span class="comment">----------------删除用户前先锁定</span></span><br><span class="line"><span class="comment">--1、先锁定用户</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> HISOPT account lock;</span><br><span class="line"></span><br><span class="line"><span class="comment">--2、查询出session,杀死</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;alter system kill session &#x27;&#x27;&#x27;</span><span class="operator">||</span>  sid <span class="operator">||</span> <span class="string">&#x27;,&#x27;</span><span class="operator">||</span> serial#<span class="operator">||</span><span class="string">&#x27;&#x27;&#x27;;&#x27;</span>    <span class="keyword">from</span> v$session <span class="keyword">where</span> username <span class="keyword">in</span> (<span class="string">&#x27;HISOPT&#x27;</span>,<span class="string">&#x27;HISQRY&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">----------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--4.清除用户和用户数据</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> 用户名 CASCADE</span><br><span class="line"></span><br><span class="line"><span class="comment">--eg:</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> hisqry CASCADE;</span><br><span class="line"></span><br><span class="line"><span class="comment">--5.创建用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户名 identified <span class="keyword">by</span> 密码 <span class="keyword">default</span> tablespace 表空间 temporary tablespace 临时表空间</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> hisqry identified <span class="keyword">by</span> hisqry <span class="keyword">default</span> tablespace TS_HIS temporary tablespace TS_TEMP;</span><br><span class="line"></span><br><span class="line"><span class="comment">--6.授权用户</span></span><br><span class="line"><span class="keyword">grant</span> [括号里面是要授的权限逗号分隔 <span class="keyword">connect</span>,resource,dba] <span class="keyword">to</span> 用户名</span><br><span class="line"></span><br><span class="line">eg: </span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span> <span class="keyword">to</span> hisqry;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-导库"><a href="#2-导库" class="headerlink" title="2.导库"></a>2.导库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入</span><br><span class="line">imp hisopt<span class="operator">/</span>hisopt<span class="variable">@192</span><span class="number">.168</span><span class="number">.6</span><span class="number">.68</span>:<span class="number">1521</span><span class="operator">/</span>ORCL file<span class="operator">=</span><span class="operator">/</span>home<span class="operator">/</span>oracle<span class="operator">/</span>dmpdata<span class="operator">/</span><span class="number">20230130</span>dmp<span class="operator">/</span>hisopt20230130040001.dmp grants<span class="operator">=</span>y <span class="keyword">full</span><span class="operator">=</span>y STATISTICS<span class="operator">=</span><span class="keyword">NONE</span> log<span class="operator">=</span><span class="operator">/</span>home<span class="operator">/</span>oracle<span class="operator">/</span>imp_log_20230203.log;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>导出</span><br><span class="line">exp hisopt<span class="operator">/</span>hisopt<span class="variable">@192</span><span class="number">.168</span><span class="number">.6</span><span class="number">.73</span>:<span class="number">1521</span><span class="operator">/</span>PHX file<span class="operator">=</span><span class="operator">/</span>home<span class="operator">/</span>oracle<span class="operator">/</span>mcnopt20220322.dmp grants<span class="operator">=</span>y BUFFER<span class="operator">=</span><span class="number">80000</span> FEEDBACK<span class="operator">=</span><span class="number">100</span> owner<span class="operator">=</span>用户名</span><br></pre></td></tr></table></figure><h3 id="2-0-Oracle-IMP-00017-error-6550解决方法"><a href="#2-0-Oracle-IMP-00017-error-6550解决方法" class="headerlink" title="2.0 Oracle IMP-00017 error 6550解决方法"></a>2.0 Oracle IMP-00017 error 6550解决方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imp方式导入时遇到imp 00017 error 6550 错误</span><br><span class="line"></span><br><span class="line">解决办法：在导入语句后面加上STATISTICS=NONE 再只执行语句即可</span><br><span class="line">修改后的语句：imp **/**@orcl  tablespaces=rzdocfile=E:\**\rzdoc.DMP log=E:\**\rzdoc.log full=y STATISTICS=NONE</span><br></pre></td></tr></table></figure><h3 id="2-1查看表数量"><a href="#2-1查看表数量" class="headerlink" title="2.1查看表数量"></a>2.1查看表数量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">0</span>) <span class="keyword">from</span> user_tables <span class="keyword">where</span> TABLESPACE_NAME <span class="operator">=</span> <span class="string">&#x27;TS_HIS&#x27;</span> </span><br></pre></td></tr></table></figure><h3 id="2-2查看用户"><a href="#2-2查看用户" class="headerlink" title="2.2查看用户"></a>2.2查看用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dba_users;</span><br></pre></td></tr></table></figure><h3 id="2-3查询表空间大小"><a href="#2-3查询表空间大小" class="headerlink" title="2.3查询表空间大小"></a>2.3查询表空间大小</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.tablespace_name 表空间名,</span><br><span class="line">total 表空间大小,</span><br><span class="line"><span class="keyword">free</span> 表空间剩余大小,</span><br><span class="line">(total <span class="operator">-</span> <span class="keyword">free</span>) 表空间使用大小,</span><br><span class="line">total <span class="operator">/</span> (<span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span>) 表空间大小,</span><br><span class="line"><span class="keyword">free</span> <span class="operator">/</span> (<span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span>) 表空间剩余大小,</span><br><span class="line">(total <span class="operator">-</span> <span class="keyword">free</span>) <span class="operator">/</span> (<span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span>) 表空间使用大小,</span><br><span class="line">round((total <span class="operator">-</span> <span class="keyword">free</span>) <span class="operator">/</span> total, <span class="number">4</span>) <span class="operator">*</span> <span class="number">100</span> 使用率 </span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> tablespace_name, <span class="built_in">SUM</span>(bytes) <span class="keyword">free</span></span><br><span class="line"><span class="keyword">FROM</span> dba_free_space</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> tablespace_name) a,</span><br><span class="line">(<span class="keyword">SELECT</span> tablespace_name, <span class="built_in">SUM</span>(bytes) total</span><br><span class="line"><span class="keyword">FROM</span> dba_data_files</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> tablespace_name) b</span><br><span class="line"><span class="keyword">WHERE</span> a.tablespace_name <span class="operator">=</span> b.tablespace_name</span><br></pre></td></tr></table></figure><h3 id="2-4自动扩展表空间"><a href="#2-4自动扩展表空间" class="headerlink" title="2.4自动扩展表空间"></a>2.4自动扩展表空间</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> database datafile <span class="string">&#x27;/home/oracle/app/oradata/orcl/TS_HIS_02.dbf&#x27;</span> autoextend <span class="keyword">on</span> next <span class="number">500</span>m maxsize <span class="number">10000</span>m;</span><br></pre></td></tr></table></figure><h3 id="2-5增加表空间"><a href="#2-5增加表空间" class="headerlink" title="2.5增加表空间"></a>2.5增加表空间</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span>  tablespace TS_HIS <span class="keyword">add</span> datafile <span class="string">&#x27;/home/oracle/app/oradata/orcl/TS_HIS_02.dbf&#x27;</span> size <span class="number">30</span>G;</span><br></pre></td></tr></table></figure><h3 id="2-6-查询表空间位置"><a href="#2-6-查询表空间位置" class="headerlink" title="2.6 查询表空间位置"></a>2.6 查询表空间位置</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dba_data_files;</span><br></pre></td></tr></table></figure><h3 id="2-7-查询当前实例名"><a href="#2-7-查询当前实例名" class="headerlink" title="2.7 查询当前实例名"></a>2.7 查询当前实例名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> instance_name;</span><br></pre></td></tr></table></figure><h3 id="2-8-导出当前库中所有表字段的注释"><a href="#2-8-导出当前库中所有表字段的注释" class="headerlink" title="2.8 导出当前库中所有表字段的注释"></a>2.8 导出当前库中所有表字段的注释</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;comment on column   &#x27;</span><span class="operator">||</span> t.table_name<span class="operator">||</span><span class="string">&#x27;.&#x27;</span><span class="operator">||</span></span><br><span class="line">       t.colUMN_NAME<span class="operator">||</span><span class="string">&#x27;  is  &#x27;</span>  <span class="operator">||</span> <span class="string">&#x27;  &#x27;&#x27;  &#x27;</span> <span class="operator">||</span></span><br><span class="line">       t1.COMMENTS <span class="operator">||</span><span class="string">&#x27;  &#x27;&#x27;  &#x27;</span><span class="operator">||</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line">  <span class="keyword">FROM</span> User_Tab_Cols t, User_Col_Comments t1</span><br><span class="line"> <span class="keyword">WHERE</span> t.table_name <span class="operator">=</span> t1.table_name</span><br><span class="line">    <span class="keyword">AND</span> t.column_name <span class="operator">=</span> t1.column_name(<span class="operator">+</span>);</span><br></pre></td></tr></table></figure><h3 id="2-9-导出当前库中所有表名的注释"><a href="#2-9-导出当前库中所有表名的注释" class="headerlink" title="2.9 导出当前库中所有表名的注释"></a>2.9 导出当前库中所有表名的注释</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;comment on column   &#x27;</span><span class="operator">||</span> t.table_name<span class="operator">||</span><span class="string">&#x27;.&#x27;</span><span class="operator">||</span></span><br><span class="line">       t.colUMN_NAME<span class="operator">||</span><span class="string">&#x27;  is  &#x27;</span>  <span class="operator">||</span> <span class="string">&#x27;  &#x27;&#x27;  &#x27;</span> <span class="operator">||</span></span><br><span class="line">       t1.COMMENTS <span class="operator">||</span><span class="string">&#x27;  &#x27;&#x27;  &#x27;</span><span class="operator">||</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line">  <span class="keyword">FROM</span> User_Tab_Cols t, User_Col_Comments t1</span><br><span class="line"> <span class="keyword">WHERE</span> t.table_name <span class="operator">=</span> t1.table_name</span><br><span class="line">    <span class="keyword">AND</span> t.column_name <span class="operator">=</span> t1.column_name(<span class="operator">+</span>);</span><br></pre></td></tr></table></figure><h3 id="2-10-oracle导出所有表结构及注释"><a href="#2-10-oracle导出所有表结构及注释" class="headerlink" title="2.10 oracle导出所有表结构及注释"></a>2.10 oracle导出所有表结构及注释</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> B.TABLE_NAME     <span class="keyword">AS</span> &quot;</span><br><span class="line">表名</span><br><span class="line">&quot;, </span><br><span class="line">       C.COMMENTS       <span class="keyword">AS</span> &quot;</span><br><span class="line">表说明</span><br><span class="line">&quot;, </span><br><span class="line">       B.COLUMN_ID      <span class="keyword">AS</span> &quot;</span><br><span class="line">字段序号</span><br><span class="line">&quot;, </span><br><span class="line">       B.COLUMN_NAME    <span class="keyword">AS</span> &quot;</span><br><span class="line">字段名</span><br><span class="line">&quot;, </span><br><span class="line">       B.DATA_TYPE      <span class="keyword">AS</span> &quot;</span><br><span class="line">字段数据类型</span><br><span class="line">&quot;, </span><br><span class="line">       B.DATA_LENGTH    <span class="keyword">AS</span> &quot;</span><br><span class="line">数据长度</span><br><span class="line">&quot;, </span><br><span class="line">       B.DATA_PRECISION <span class="keyword">AS</span> &quot;</span><br><span class="line">整数位</span><br><span class="line">&quot;, </span><br><span class="line">       B.DATA_SCALE     <span class="keyword">AS</span> &quot;</span><br><span class="line">⼩数位</span><br><span class="line">&quot;, </span><br><span class="line">       A.COMMENTS       <span class="keyword">AS</span> &quot;</span><br><span class="line">字段说明&quot; </span><br><span class="line">  <span class="keyword">FROM</span> </span><br><span class="line">  ALL_COL_COMMENTS A, </span><br><span class="line">  ALL_TAB_COLUMNS B, </span><br><span class="line">  ALL_TAB_COMMENTS C </span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> A.TABLE_NAME <span class="keyword">IN</span> (<span class="keyword">SELECT</span> U.TABLE_NAME <span class="keyword">FROM</span> USER_ALL_TABLES U) </span><br><span class="line"></span><br><span class="line">   <span class="keyword">AND</span> A.OWNER <span class="operator">=</span> B.OWNER </span><br><span class="line"></span><br><span class="line">   <span class="keyword">AND</span> A.TABLE_NAME <span class="operator">=</span> B.TABLE_NAME </span><br><span class="line"></span><br><span class="line">   <span class="keyword">AND</span> A.COLUMN_NAME <span class="operator">=</span> B.COLUMN_NAME </span><br><span class="line"></span><br><span class="line">   <span class="keyword">AND</span> C.TABLE_NAME <span class="operator">=</span> A.TABLE_NAME </span><br><span class="line"></span><br><span class="line">   <span class="keyword">AND</span> C.OWNER <span class="operator">=</span> A.OWNER </span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> A.TABLE_NAME, B.COLUMN_ID </span><br></pre></td></tr></table></figure><h2 id="3-监听失败问题"><a href="#3-监听失败问题" class="headerlink" title="3.监听失败问题"></a>3.监听失败问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">1.查看监听状态</span><br><span class="line">lsnrctl status;</span><br><span class="line"></span><br><span class="line">2.修改文件中/home/oracle/app/oracle/product/11.2.0/dbhome_1/network/admin/listener.ora</span><br><span class="line"></span><br><span class="line">LISTENER =</span><br><span class="line">  (DESCRIPTION_LIST =</span><br><span class="line">    (DESCRIPTION =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = rabbitmq-1)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">SID_LIST_LISTENER =</span><br><span class="line">(SID_LIST =</span><br><span class="line">  (SID_DESC =</span><br><span class="line">  (GLOBAL_DBNAME = orcl)</span><br><span class="line">  (SID_NAME = orcl)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ADR_BASE_LISTENER = /home/oracle/app</span><br><span class="line"></span><br><span class="line">3.修改文件中/home/oracle/app/oracle/product/11.2.0/dbhome_1/network/admin/tnsnames.ora</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ORCL =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.6.68)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = orcl)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">4.修改etc/hosts文件中的地址映射</span><br><span class="line">5.重启数据库</span><br><span class="line"></span><br><span class="line">6.强制注册服务</span><br><span class="line">alter system register</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-linux命令"><a href="#4-linux命令" class="headerlink" title="4.linux命令"></a>4.linux命令</h2><h3 id="4-1查看硬盘大小"><a href="#4-1查看硬盘大小" class="headerlink" title="4.1查看硬盘大小"></a>4.1查看硬盘大小</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h  </span><br></pre></td></tr></table></figure><h3 id="4-2查看当前目录下各文件大小"><a href="#4-2查看当前目录下各文件大小" class="headerlink" title="4.2查看当前目录下各文件大小"></a>4.2查看当前目录下各文件大小</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh * </span><br></pre></td></tr></table></figure><h3 id="4-3linux服务器间复制文件"><a href="#4-3linux服务器间复制文件" class="headerlink" title="4.3linux服务器间复制文件"></a>4.3linux服务器间复制文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.从本机发送到远程主机</span><br><span class="line">scp /home/1.gif root@172.19.2.75:/home/root</span><br><span class="line">然后会提示你输入另外那台172.19.2.75主机的root用户的登录密码，接着就开始cp和ungzip了</span><br><span class="line"></span><br><span class="line">2.文件从远程主机copy到当前系统</span><br><span class="line">复制文件夹的格式是</span><br><span class="line">scp -r root@192.168.1.1:/home/ /本地目录</span><br><span class="line">eg:</span><br><span class="line">scp root@172.19.2.75:/home/abc.gif /home/root</span><br></pre></td></tr></table></figure><h3 id="4-4查看环境变量"><a href="#4-4查看环境变量" class="headerlink" title="4.4查看环境变量"></a>4.4查看环境变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><h2 id="5-导库脚本"><a href="#5-导库脚本" class="headerlink" title="5.导库脚本"></a>5.导库脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1、登录oracle： sqlplus</span><br><span class="line">2、使用特殊权限操作： /as sysdba    sqlplus / as sysdba</span><br><span class="line">3、停止数据库实例： shutdown immediate;</span><br><span class="line">4、重启oracle实例： startup;</span><br><span class="line">5、清除用户和用户数据：drop user hisopt CASCADE;</span><br><span class="line">6、创建用户： create user hisopt identified by hisopt </span><br><span class="line">              default tablespace TS_HIS </span><br><span class="line">      temporary tablespace TS_TEMP;</span><br><span class="line">7、授权用户： grant connect,resource,dba to hisopt;</span><br><span class="line">8、上传dmp文件</span><br><span class="line">9、执行DMP导入：imp hisopt/hisopt@192.168.6.15:1521/PHXORCL file=/home/oracle/dmpdata/20200904/hisopt20200904112019.dmp log=/home/oracle/dmpdata/20200904/hisopt20200904112019.dmp.log grants=y BUFFER=80000 FEEDBACK=100 full=y ignore=y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--以sys账号连接数据库</span><br><span class="line">--清理用户</span><br><span class="line">drop user hisopt CASCADE;</span><br><span class="line">drop user hislog CASCADE;</span><br><span class="line">drop user hisqry CASCADE;</span><br><span class="line">drop user finopt CASCADE;</span><br><span class="line">drop user biquery CASCADE;</span><br><span class="line">drop user biolap CASCADE;</span><br><span class="line">drop user mcnopt CASCADE;</span><br><span class="line"></span><br><span class="line">drop user his_dll CASCADE;</span><br><span class="line"></span><br><span class="line">--清理用户失败 查询用户进程</span><br><span class="line">SELECT SID, SERIAL# FROM V$SESSION WHERE USERNAME = &#x27;HISOPT&#x27;;</span><br><span class="line"></span><br><span class="line">---清理进程</span><br><span class="line">alter system kill session &#x27;1,1&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--创建用户</span><br><span class="line">create user hisopt identified by hisopt default tablespace TS_HIS temporary tablespace TS_TEMP;</span><br><span class="line"></span><br><span class="line">create user hislog identified by hislog default tablespace TS_LOG temporary tablespace TS_TEMP;</span><br><span class="line"></span><br><span class="line">create user hisqry identified by hisqry default tablespace TS_HIS temporary tablespace TS_TEMP;</span><br><span class="line"></span><br><span class="line">create user finopt identified by finopt default tablespace TS_FIN temporary tablespace TS_FINTEMP;</span><br><span class="line"></span><br><span class="line">create user biolap identified by biolap default tablespace TS_BIDW temporary tablespace TS_BIDWTEMP;</span><br><span class="line"></span><br><span class="line">create user biquery identified by biquery default tablespace TS_BIDW temporary tablespace TS_BIDWTEMP;</span><br><span class="line"></span><br><span class="line">create user mcnopt identified by mcnopt default tablespace TS_HIS  temporary tablespace TS_TEMP;</span><br><span class="line"></span><br><span class="line">create user mcnopt identified by mcnopt default tablespace TS_HIS  temporary tablespace TS_TEMP;</span><br><span class="line"></span><br><span class="line">--给用户授权</span><br><span class="line"></span><br><span class="line">grant connect,resource to his_dll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grant connect,resource,dba to hisqry;</span><br><span class="line">grant connect,resource,dba to hisopt;</span><br><span class="line">grant connect,resource to hislog;</span><br><span class="line">grant connect,resource,dba to finopt;</span><br><span class="line">grant connect,resource to biquery;</span><br><span class="line">grant connect,resource,dba to biolap;</span><br><span class="line">grant connect,resource to mcnopt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> SQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tags test</title>
      <link href="/2021/02/15/Draft/Tags-test/"/>
      <url>/2021/02/15/Draft/Tags-test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Redis </tag>
            
            <tag> Docker </tag>
            
            <tag> 集群 </tag>
            
            <tag> 框架 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> go </tag>
            
            <tag> 安装 </tag>
            
            <tag> 容器化 </tag>
            
            <tag> 原理 </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> AOP </tag>
            
            <tag> JQuery </tag>
            
            <tag> K8s </tag>
            
            <tag> MySQL </tag>
            
            <tag> Oracle </tag>
            
            <tag> SQL </tag>
            
            <tag> Vue </tag>
            
            <tag> 中间件 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> MongoDB </tag>
            
            <tag> 搜索引擎 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 反射 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 缓存 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2020/05/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E5%AD%97/"/>
      <url>/2020/05/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>你好，世界</p>]]></content>
      
      
      <categories>
          
          <category> Start </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
